var async = require('async');

var esut = require('easy_util');
var log = esut.log;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var ticketStatus = cons.ticketStatus;
var ticketPrintStatus = cons.ticketPrintStatus;
var gameStatus = cons.gameStatus;


var config = require('mcp_config');
var ec = config.ec;

var dc = require("mcp_db").dc;

var feoValidate = require("mcp_feo").validate;

var dltValidate = require("mcp_dlt").validate;

var fsdValidate = require("mcp_fsd").validate;

var esfValidate = require("mcp_esf").validate;

var ktValidate = require("mcp_kt").validate;

var ValidateFactory = function(){};

ValidateFactory.prototype.validate = function(order, cb)
{
    var self = this;
    var terms = {};
    var tickets = order.tickets;
    //票据不能为空
    if(tickets == undefined || tickets == null)
    {
        cb(ec.E2070, null);
        return;
    }
    var totalTicketAmount = 0;
    if(!order.outerId)
    {
        cb(ec.E2064, null);
        return;
    }
    async.eachSeries(tickets, function(ticket, callback) {
        var name = "validate" + ticket.gameCode;
        totalTicketAmount += ticket.amount;
        if (!ticket.outerId)
        {
            ticket.ec = ec.E2064;
            callback();
            return;
        }
        self.checkTerm(terms, ticket, function(err, term){
            if(err)
            {
                if(term){
                    ticket.ec = ec.E0999;
                    callback();
                }else{
                    ticket.ec = ec.E2003;
                    callback();
                }
            }else
            {

                //期次必须在销售状态
                if(term.status != termStatus.ON_SALE)
                {
                    ticket.ec = ec.E2008;
                    callback();
                    return;
                }
                ticket.status = ticketStatus.UN_OPEN;
                ticket.printStatus = ticketPrintStatus.WAITING_PRINT;
                if(self[name])
                {
                    self.checkGame(order, ticket, function(err, data) {
                        if (err) {
                            if(err.repCode = '2068'){
                                ticket.ec = ec.E2068;
                            }else{
                                ticket.ec = ec.E0999;
                            }
                            callback();
                        }
                        else
                        {
                            self[name](order, ticket, function(err, data){
                                if(err)
                                {
                                    ticket.ec = err;
                                }
                                else
                                {
                                    ticket.ec = ec.E0000;
                                }
                                callback();
                            });
                        }
                    });
                }
                else
                {
                    ticket.ec = ec.E2063;
                    callback();
                }
            }
        });
    }, function(err){
        if(err)
        {
            cb(err);
        }
        else
        {
            if(totalTicketAmount != order.amount)
            {
                cb(ec.E2061);
            }
            else
            {
                cb(null);
            }
        }
    });
};

/**
 * 校验游戏是否可用
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.checkGame = function(order, ticket, cb)
{
    var table = dc.mg.get("relation");
    var cond = {_id:order.customerId + "_" + ticket.gameCode};
    var gamePermission =  dc.mg.get("gamePermission");
    var gameCond = {_id:ticket.gameCode}
    table.findOne(cond, {}, [], function(err, data){
        if(err)
        {
            cb(ec.E0999);
        }
        else
        {
            if(data == null || data == undefined)
            {
                cb(ec.E2068);
            }
            else
            {
                var relationTo = data.relayTo;
                gamePermission.findOne(gameCond, {} , [] , function(err, data){
                    if(err){
                        cb(ec.E0999);
                    }else{
                        if(data == null || data == undefined){
                            cb(ec.E2068);
                        }else{
                            if(data.gamePermission == gameStatus.USABLE){
                                ticket.printId = relationTo;
                                cb(null);
                            }else{
                                cb(ec.E2068);
                            }
                        }
                    }
                });
            }
        }
    });
}

/**
 * 获取期次状态
 * @param gameCode
 * @param termCode
 */
ValidateFactory.prototype.checkTerm = function(terms, ticket, cb)
{
    var key = ticket.gameCode + "_" + ticket.termCode;
    var term = terms[key];
    if(!term)
    {
        var table = dc.main.get("term");
        table.findOne({id:key}, {}, [], function(err, data){
            if(err)
            {
                cb(ec.E0999);
            }
            else
            {
                if(data)
                {
                    terms[data.id] = data;
                    cb(null, data);
                }
                else
                {
                    cb(ec.E2065);
                }
            }
        });
    }
    else
    {
        cb(null, term);
    }
};

ValidateFactory.prototype.validateT06 = function(order, ticket, cb)
{
    var self = this;
    feoValidate.validate(order, ticket, cb);
};

/**
 * 大乐透
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.validateT01 = function(order, ticket, cb)
{
    var self = this;
    dltValidate.validate(order, ticket, cb);
};

/**
 * 11 选 5
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.validateT05 = function(order, ticket, cb)
{
    var self = this;
    esfValidate.validate(order, ticket, cb);
};

/**
 * 福彩3d
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.validateF02 = function(order, ticket, cb)
{
    var self = this;
    fsdValidate.validate(order, ticket, cb);
};

/**
 * 快三
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.validateF04 = function(order, ticket, cb)
{
    var self = this;
    ktValidate.validate(order, ticket, cb);
};

module.exports = new ValidateFactory();