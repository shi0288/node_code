var async = require('async');
var prop = require('mcp_config').prop;
var esdb = require('easy_db');
var Database = esdb.Database;
var Table = esdb.Table;
var Column = esdb.Column;

var esut = require('easy_util');
var log = esut.log;



var DbCenter = function(){
    var self = this;
};

DbCenter.prototype.init = function(cb)
{
    var self = this;
    esdb.log.setShowLog(true);
    async.waterfall([
        //the mysql
        function(cb){
            self._initMain(function(err){
                cb(err);
            });
        },
        //the mongodb
        function(cb){
            self._initMg(function(err){
                cb(err);
            });
        } ,
        //the mongodb 消息库
        function(cb){
            self._initMgMsg(function(err){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype.check = function(cb)
{
    var self = this;
    async.waterfall([
        //check the mysql
        function(cb){
            self._checkMain(function(err){
                cb(err);
            });
        },
        //check the mongodb
        function(cb){
            self._checkMg(function(err){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype._initMg = function(cb)
{
    var self = this;
    var db = new Database(prop.mg);

    //add tables
    var uniqueIdTable = new Table(db, "uniqueId", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false)
    ]);
    db.put(uniqueIdTable);
    var stInfoTable = new Table(db, "stInfo", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "st", "varchar", 32, false, undefined),
        new Column(db, "fixSt", "varchar", 32, false, undefined),
        new Column(db, "lastActiveTime", "bigint", -1, false, undefined)
    ]);
    db.put(stInfoTable);
    var account = new Table(db, "account", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "balance", "bigint", -1, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(account);
    var mcp_id = new Table(db, "mcp_id", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "value", "bigint", -1, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(mcp_id);
    var relation = new Table(db, "relation", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "customerId", "varchar", 80, false, undefined),
        new Column(db, "gameCode", "varchar", 80, false, undefined),
        new Column(db, "relayTo", "varchar", 80, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(relation);
    var gamePermission = new Table(db, "gamePermission", [
        new Column(db, "_id", "varchar", 20, false, undefined, true, false),
        new Column(db, "salePermission", "int", 11, false, undefined)
    ]);
    db.put(gamePermission);
    var printqueen = new Table(db, "printqueen", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "printId", "varchar", 40, false, undefined),    //出票用户
        new Column(db, "gameCode", "varchar", 20, false, undefined),    //游戏
        new Column(db, "termCode", "varchar", 40, false, undefined),    //期次
        new Column(db, "pType", "varchar", 10, false, undefined),    //玩法
        new Column(db, "bType", "varchar", 10, false, undefined),    //投注方式
        new Column(db, "status", "int", 11, false, -1), //状态
        new Column(db, "multiple", "int", 11, false, 1), //倍数
        new Column(db, "amount", "bigint", -1, false, 0),     //金额
        new Column(db, "number", "varchar", 240, false, undefined),    //外部id
        new Column(db, "createTime", "bigint", -1, false, undefined),    //票据的创建时间
        new Column(db, "takeTime", "bigint", -1, false, undefined),
        new Column(db, "version", "int", 11, false, 0)  //版本
    ]);
    db.put(printqueen);
    var notifyqueen = new Table(db, "notifyqueen", [
        new Column(db, "_id", "bigint", -1, false, undefined, true, false),
        new Column(db, "type", "int", 11, false, undefined),    //类型
        new Column(db, "customerId", "varchar", 20, false, undefined),    //用户
        new Column(db, "content", "varchar", 20, false, undefined),    //游戏
        new Column(db, "createTime", "date", -1, false, undefined),    //创建时间
        new Column(db, "takeTime", "date", -1, false, undefined),    //取走时间
        new Column(db, "status", "int", 11, false, 0),  //通知的状态
        new Column(db, "tryCount", "int", 11, false, 0),  //重试的次数
        new Column(db, "ip", "varchar", 80, false, 0),  //通知的ip
        new Column(db, "port", "varchar", 10, false, 0),  //通知的端口
        new Column(db, "path", "varchar", 80, false, 0),  //通知的地址
        new Column(db, "key", "varchar", 40, false, 0),  //通知的地址
        new Column(db, "digestType", "int", 11, false, 0),  //通知的加密方式
        new Column(db, "version", "int", 11, false, 0)  //版本
    ]);
    db.put(notifyqueen);
    var cus_config = new Table(db, "cus_config", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "notifyIp", "varchar", 80, true, undefined),    //通知ip
        new Column(db, "notifyPort", "int", 11, true, undefined),    //通知port
        new Column(db, "notifyPath", "varchar", 80, true, undefined),    //通知path
        new Column(db, "notifyKey", "varchar", 40, true, undefined),    //通知密钥
        new Column(db, "digestType", "int", 11, false, 0),  //通知的加密方式
        new Column(db, "version", "int", 11, false, 0)  //版本
    ]);
    db.put(cus_config);
    self.mg = db;
    self.mg.init(cb);
};

/**
 * 初始化消息库
 * @param cb
 * @private
 */
DbCenter.prototype._initMgMsg = function(cb)
{
    var self = this;
    var db = new Database(prop.msg);

    //消息
    var msg = new Table(db, "msg", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),    //消息的id
        new Column(db, "parentId", "varchar", 80, false, undefined),    //消息的父消息id
        new Column(db, "type", "int", 11, false, undefined),    //消息的类型
        new Column(db, "subCount", "int", 11, false, 0), //子消息的数目
        new Column(db, "finishCount", "int", 11, false, 0), //子消息的数目
        new Column(db, "version", "int", 11, false, 0),
        new Column(db, "status", "int", 11, false, undefined),   //消息的状态
        new Column(db, "seq", "int", 11, false, undefined),   //子消息的序号
        new Column(db, "createTime", "bigint", -1, false, undefined),   //创建时间
        new Column(db, "finishTime", "bigint", -1, false, undefined)   //创建时间
    ]);
    db.put(msg);
    //消息内容
    var detail_term = new Table(db, "detail_term", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "msgId", "varchar", 80, false, undefined),
        new Column(db, "gameCode", "varchar", 20, false, undefined),
        new Column(db, "code", "varchar", 40, false, undefined),
        new Column(db, "nextCode", "varchar", 40, false, undefined),
        new Column(db, "wNum", "varchar", 80, false, ''),
        new Column(db, "status", "int", 11, false, -1),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(detail_term);
    self.mg_msg = db;
    self.mg_msg.init(cb);
}

DbCenter.prototype._checkMg = function(cb)
{
    var self = this;
    var kvTable = self.mg.get("mcp_id");
    kvTable.findOne({_id:"orderId"}, {}, [], function(err, data){
        if(err)
        {
            cb(err);
            return;
        }
        if(!data)
        {
            kvTable.save({_id:"orderId", value:1}, [], function(err, data){
                cb(err);
            });
        }
        else
        {
            cb(null);
        }
    });
};

DbCenter.prototype._checkMain = function(cb)
{
    var self = this;
    cb(null);
};


DbCenter.prototype._initMain = function(cb)
{
    var self = this;
    var db = new Database(prop.main);
    var torder = new Table(db, "torder", [
        new Column(db, "id", "bigint", -1, false, undefined, true, false),
        new Column(db, "createTime", "date", -1, false, undefined), //创建时间
        new Column(db, "amount", "bigint", -1, false, 0),   //订单金额
        new Column(db, "trueAmount", "bigint", -1, false, 0),   //订单成功金额
        new Column(db, "status", "int", 11, false, -1),     //状态
        new Column(db, "customerId", "varchar", 40, false, undefined),
        new Column(db, "outerId", "varchar", 40, false, undefined),    //外部id
        new Column(db, "version", "int", 11, false, 0)      //版本
    ]);
    db.put(torder);
    var tticket = new Table(db, "tticket", [
        new Column(db, "id", "bigint", -1, false, undefined, true, true),
        new Column(db, "outerId", "varchar", 40, false, undefined),    //外部id
        new Column(db, "customerId", "varchar", 40, false, undefined),    //所属用户
        new Column(db, "printId", "varchar", 40, false, undefined),    //出票用户
        new Column(db, "gameCode", "varchar", 20, false, undefined),    //游戏
        new Column(db, "termCode", "varchar", 40, false, undefined),    //期次
        new Column(db, "auditTermCode", "varchar", 40, false, ''),    //结算期次
        new Column(db, "pType", "varchar", 10, false, undefined),    //玩法
        new Column(db, "bType", "varchar", 10, false, undefined),    //投注方式
        new Column(db, "createTime", "date", -1, false, undefined), //创建时间
        new Column(db, "auditTime", "date", -1, false, undefined), //审计时间
        new Column(db, "printTime", "date", -1, true, undefined), //打印时间
        new Column(db, "cashTime", "date", -1, true, undefined), //兑奖时间
        new Column(db, "cashTerminal", "varchar", 40, true, undefined),//兑奖终端机编号
        new Column(db, "prizeTime", "date", -1, true, undefined), //返奖时间
        new Column(db, "status", "int", 11, false, -1), //状态
        new Column(db, "printStatus", "int", 11, false, -1), //出票状态
        new Column(db, "multiple", "int", 11, false, 1), //倍数
        new Column(db, "amount", "bigint", -1, false, 0),     //金额
        new Column(db, "bonus", "bigint", -1, false, 0),     //税后奖金
        new Column(db, "bonusDetail", "varchar", 600, false, ''),     //税后奖金
        new Column(db, "number", "varchar", 240, false, undefined),    //头注号码
        new Column(db, "dNumber", "varchar", 80, false, ''),    //开奖号码
        new Column(db, "rNumber", "varchar", 240, false, ''),    //竞彩使用
        new Column(db, "bonusBeforeTax", "bigint", -1, false, 0),     //税前奖金
        new Column(db, "orderId", "bigint", -1, false, undefined),     //订单号
        new Column(db, "province", "varchar", 20, false, ''),    //省份
        new Column(db, "seq", "varchar", 80, false, ''),    //实体票序号
        new Column(db, "terminal", "varchar", 40, false, ''),    //终端机号
        new Column(db, "version", "int", 11, false, 0)  //版本
    ]);
    db.put(tticket);
    var hitticket = new Table(db, "hitticket", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),
        new Column(db, "outerId", "varchar", 80, false, undefined),
        new Column(db, "bonus", "bigint", -1, false, 0),     //税后奖金
        new Column(db, "bonusDetail", "varchar", 600, false, ''),     //税后奖金
        new Column(db, "bonusBeforeTax", "bigint", -1, false, 0),     //税前奖金
        new Column(db, "auditTermCode", "varchar", 40, false, ''),    //结算期次
        new Column(db, "dNumber", "varchar", 80, false, ''),    //开奖号码
        new Column(db, "status", "int", 11, false, -1), //状态
    ]);
    db.put(hitticket)
    var term = new Table(db, "term", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),     //gameCode + "_" + code
        new Column(db, "gameCode", "varchar", 20, false, undefined),
        new Column(db, "code", "varchar", 40, false, undefined),
        new Column(db, "nextCode", "varchar", 40, false, undefined),
        new Column(db, "openTime", "date", -1, false, undefined),
        new Column(db, "closeTime", "date", -1, false, undefined),
        //加入开奖时间
        new Column(db, "bonusTime", "date", -1, true, undefined),
        new Column(db, "status", "int", 11, false, -1),
        new Column(db, "pool", "bigint", 11, false, -1),
        new Column(db, "wNum", "varchar", 80, false, ''),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(term);
    var termreport = new Table(db, "termreport", [
        new Column(db, "id", "bigint", -1, false, undefined, true, true),
        new Column(db, "gameCode", "varchar", 20, false, undefined),    //游戏
        new Column(db, "termCode", "varchar", 40, false, undefined),    //期次
        new Column(db, "customerId", "varchar", 40, false, undefined),  //所属用户
        new Column(db, "type", "int", 11, false, -1),       //销售或者出票
        new Column(db, "saleCount", "bigint", -1, false, 0),
        new Column(db, "saleAmount", "bigint", -1, false, 0),
        new Column(db, "hitCount", "bigint", -1, false, 0), //中奖数目
        new Column(db, "hitAmount", "bigint", -1, false, 0),    //中奖金额
        new Column(db, "bonus", "bigint", -1, false, 0),    //税后奖金
        new Column(db, "bonusBeforeTax", "bigint", -1, false, 0),    //税前奖金
        new Column(db, "notHitCount", "bigint", -1, false, 0),  //未中奖数目./she
        new Column(db, "notHitAmount", "bigint", -1, false, 0), //未中奖金额
        new Column(db, "failCount", "bigint", -1, false, 0),    //出票失败数目
        new Column(db, "failAmount", "bigint", -1, false, 0),   //出票失败金额
        new Column(db, "createTime", "date", -1, false, undefined), //创建时间
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(termreport);
    var customer = new Table(db, "customer", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "name", "varchar", 40, false, undefined),
        new Column(db, "password", "varchar", 40, false, undefined),
        new Column(db, "type", "int", 11, false, 0),
        new Column(db, "status", "int", 11, false, 0),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(customer);
    var operation = new Table(db, "operation", [
        new Column(db, "id", "varchar", 40, false, undefined, true, false),
        new Column(db, "userType", "int", 11, false, undefined),
        new Column(db, "hasChildren", "int", 11, false, 0),
        new Column(db, "name", "varchar", 20, false, undefined),
        new Column(db, "parent", "varchar", 40, false, ''),
        new Column(db, "url", "varchar", 80, false, undefined),
        new Column(db, "status", "int", 11, false, 1),
        new Column(db, "version", "int", 11, false, 0),
        new Column(db, "level", "int", 11, false, 0)
    ]);
    db.put(operation);
    var gamegrade = new Table(db, "gamegrade", [
        new Column(db, "id", "varchar", 100, false, undefined, true, false),
        new Column(db, "name", "varchar", 20, false, undefined),
        new Column(db, "gameCode", "varchar", 40, false, undefined),
        new Column(db, "termCode", "varchar", 40, false, undefined),
        new Column(db, "level", "int", 11, false, 0),
        new Column(db, "bonus", "bigint", -1, false, 0),
        new Column(db, "count", "bigint", -1, false, 0),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(gamegrade);
    var moneylog = new Table(db, "moneylog", [
        new Column(db, "id", "bigint", -1, false, undefined, true, true),
        new Column(db, "roleId", "varchar", 20, false, undefined),
        new Column(db, "accountId", "varchar", 20, false, undefined),
        new Column(db, "typeId", "varchar", 20, false, undefined),
        new Column(db, "subjectId", "varchar", 20, false, undefined),
        new Column(db, "createTime", "date", -1, false, undefined),
        new Column(db, "amount", "bigint", -1, false, undefined),
        new Column(db, "stateAfter", "bigint", -1, false, undefined),
        new Column(db, "stateBefore", "bigint", -1, false, undefined),
        new Column(db, "customerId", "varchar", 80, false, undefined),
        new Column(db, "orderId", "varchar", 80, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(moneylog);
    self.main = db;
    self.main.init(cb);
};



module.exports = new DbCenter();

