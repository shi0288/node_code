var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;

var dc = require('mcp_db').dc;

var config = require('mcp_config');
var game = config.game;
var prop = config.prop;
var ec = config.ec;

var service = require("mcp_service");
var digestSer = service.digestSer;

var async = require('async');

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var ticketPrintQueenStatus = cons.ticketPrintQueenStatus;
var userType = cons.userType;
var errUrl = cons.errUrl;


var MongoPageControl = function(){};

MongoPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    var self = this;
    var cmd = headNode.cmd;
    async.waterfall([
        //校验是否结束会话
        function (cb) {

            var userId = headNode.userId;
            if(userId == undefined)
            {
                if(headNode.userType!=undefined){
                    var userTypeId = userType[headNode.userType];
                    ec.E9006.url=errUrl.getInfoById(userTypeId).url;
                }
                cb(ec.E9006);
            }else{
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var fromType = prop.digestFromType.CACHE;
            digestSer.getKey({fromType:fromType, userId:headNode.userId, userType:userTypeId},
                function(err, key){
                    cb(err, key);
                });
        },
        //校验密钥并处理逻辑
        function(key, cb)
        {
            if(key != headNode.key)
            {
                cb(ec.E9003);
            }
            else
            {
                self[cmd[1]](headNode, bodyNode, cb);
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
};

MongoPageControl.prototype.listTables = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:""};
    pageUtil.parse(bodyNode, backBodyNode);
    var conn = dc.mg.getConn();
    conn.collectionNames(null, {}, function(err, data){
        backBodyNode.rst = data;
        cb(null, backBodyNode);
    });
};

MongoPageControl.prototype.listMsgTables = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:""};
    pageUtil.parse(bodyNode, backBodyNode);
    var conn = dc.mg_msg.getConn();
    conn.collectionNames(null, {}, function(err, data){
        backBodyNode.rst = data;
        cb(null, backBodyNode);
    });
};

MongoPageControl.prototype.clearCheckDoc = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:""};
    backBodyNode.game = game.getInfo();
    cb(null, backBodyNode);
};

MongoPageControl.prototype.index = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:""};
    cb(null, backBodyNode);
};

module.exports = new MongoPageControl();