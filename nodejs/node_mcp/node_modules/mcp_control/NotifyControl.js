var async = require('async');
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var pageUtil = esut.pageUtil;

var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userType = cons.userType;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var ticketPrintQueenStatus = cons.ticketPrintQueenStatus;
var ticketPrintStatus = cons.ticketPrintStatus;
var notifyStatus = cons.notifyStatus;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require("mcp_service");
var digestSer = service.digestSer;
var moneySer = service.moneySer;
var kvSer = service.kvSer;
var ticketSer = service.ticketSer;

var PrintControl = function(){
    var self = this;
    self.cmd = {'N01':1, 'N02':2, 'N03':3, 'N04':4,
    'N05':5};
    self.cmdArray = [{},
        {id:1, code:'N01', fromType:prop.digestFromType.FIX, des:"取通知"},
        {id:2, code:'N02', fromType:prop.digestFromType.FIX, des:"出票成功"},
        {id:3, code:'N03', fromType:prop.digestFromType.FIX, des:"游戏通知"},
        {id:4, code:'N04', fromType:prop.digestFromType.FIX, des:""},
        {id:5, code:'N05', fromType:prop.digestFromType.FIX, des:""}
    ];
};

PrintControl.prototype.handle = function(headNode, bodyStr, userCb)
{
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function(cb)
        {
            var cmd = self.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec.E9000);
            }
            else
            {
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            digestSer.getKey({fromType:cmd.fromType, userId:headNode.userId, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //先解密
        function(key, cb)
        {
            log.info(key);
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            try {
                var bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
                cb(null, bodyNode);
            }
            catch (err)
            {
                cb(ec.E9003);
            }
        },
        //check the param
        function(bodyNode, cb){
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function(err){
                cb(err, bodyNode);
            });
        },
        //业务处理
        function(bodyNode, cb){
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


PrintControl.prototype.checkN01 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkN02 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkN03 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    cb(null);
};

PrintControl.prototype.checkN04 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkN05 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkN06 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkN07 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkN08 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


PrintControl.prototype.checkN09 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


/**
 * 取消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleN01 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    pageUtil.parse(bodyNode, backBodyNode);
    var cond = backBodyNode.cond;
    cond.customerId = headNode.userId;
    if(cond.status == undefined)
    {
        cond.status = notifyStatus.WAIT_TAKE;
    }
    var table = dc.mg.get("notifyqueen");
    log.info(cond);
    async.waterfall([
        //获得出票数目
        function(cb)
        {
            var cursor = table.find(cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
            cursor.toArray(function(err, data){
                backBodyNode.rst = data;
                backBodyNode.count = cursor.count(function(err, count){
                    backBodyNode.count = count;
                    cb(null, data);
                });
            });
        },
        function(nots, cb)
        {
            var rst = [];
            var now = new Date().getTime();
            async.each(nots, function(not, callback) {
                var cond = {_id:not._id, status:notifyStatus.WAIT_TAKE};
                var sort = {};
                var doc = {$set:{status:notifyStatus.TAKEN, takeTime:now}};
                table.findAndModify(cond, sort, doc, [], function(err, data){
                    if(data)
                    {
                        data.id = data._id;
                        delete data._id;
                        delete data.version;
                        rst[rst.length] = data;
                    }
                    callback();
                });
            }, function(err){
                cb(err, rst);
            });
        }
    ], function (err, rst) {
        backBodyNode.rst = rst;
        cb(err, backBodyNode);
    });
};

/**
 * 出票返回
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleN02 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    cb(err, backBodyNode);
};

/**
 * 游戏通知
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleN03 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    cb(err, backBodyNode);
};

/**
 * 删除消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleN04 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 修改期次
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleN05 = function(user, headNode, bodyNode, cb)
{
};

var printControl = new PrintControl();
module.exports = printControl;