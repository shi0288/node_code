var async = require('async');
var moment = require('moment');
var dc = require('mcp_db').dc;
var esdb = require('easy_db');
var config = require('mcp_config');
var prop = config.prop;
var game = config.game;
var ec = config.ec;
var ac = config.ac;

var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;

var util = require('mcp_util');
var dateMathUtil=util.dateMathUtil;

var service = require("mcp_service");
var digestSer = service.digestSer;

var cons = require('mcp_constants');
var ticketPrintStatus = cons.ticketPrintStatus;
var userType = cons.userType;
var errUrl = cons.errUrl;
var accountSelect = cons.accountSelect;

var SalePageControl = function () {
};

SalePageControl.prototype.handle = function (headNode, bodyNode, cb) {
    var self = this;
    var cmd = headNode.cmd;
    async.waterfall([
        //校验是否结束会话
        function (cb) {
            var userId = headNode.userId;
            if(userId == undefined)
            {
                if(headNode.userType!=undefined){
                    var userTypeId = userType[headNode.userType];
                    ec.E9006.url=errUrl.getInfoById(userTypeId).url;
                }
                cb(ec.E9006);
            }else{
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var fromType = prop.digestFromType.CACHE;
            digestSer.getKey({fromType:fromType, userId:headNode.userId, userType:userTypeId},
                function(err, key){
                    cb(err, key);
                });
        },
        //校验密钥并处理逻辑
        function(key, cb)
        {
            if(key != headNode.key)
            {
                cb(ec.E9003);
            }
            else
            {
                self[cmd[1]](headNode, bodyNode, cb);
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
};


SalePageControl.prototype.term = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {title: "view terms"};
    backBodyNode.sort = {id: -1};
    pageUtil.parse(bodyNode, backBodyNode);
    var table = dc.main.get("termreport");
    backBodyNode.cond.customerId = headNode.userId;
    backBodyNode.game = game.getInfo();
    var add = backBodyNode.add;
    if (add.startDate != null && add.endDate != null && add.startDate != "" && add.endDate != "") {
        add.startDate = dateMathUtil.getEarlyTime(add.startDate);
        add.endDate =  dateMathUtil.getLaterTime(add.endDate);
        backBodyNode.cond.createTime = {$gte: add.startDate, $lte: add.endDate};
        //页面显示时间格式
        add.startDate = moment(add.startDate).format("YYYY-MM-DD");
        add.endDate =  moment(add.endDate).format("YYYY-MM-DD");
    }
    var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
    cursor.toArray(function (err, data) {
        for (var key in data) {
            var set = data[key];
            set.createTime = dateUtil.toString(set.createTime);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function (err, count) {
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
}


SalePageControl.prototype.day = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {title: "view day"};
    //获取游戏种类
    backBodyNode.game = game.getInfo();
    pageUtil.parse(bodyNode, backBodyNode);
    //时间条件
    var add = backBodyNode.add;
    backBodyNode.rst = {};
    backBodyNode.count = 0;
    if (add.startDate != null && add.endDate != null && add.startDate != "" && add.endDate != "") {
        if(dateMathUtil.isValidDate(add.startDate) && dateMathUtil.isValidDate(add.endDate)){
            if(dateMathUtil.daysBetween(add.startDate,add.endDate)>31){
                backBodyNode.err="查询时间不能超过一个月！";
                cb(null,backBodyNode);
                return;
            }else{
                add.startDate = dateMathUtil.getEarlyTime(add.startDate);
                add.endDate =  dateMathUtil.getLaterTime(add.endDate);
            }
        }else{
            backBodyNode.err="请注意时间格式！";
            cb(null,backBodyNode);
            return;
        }
    }else{
        add.startDate = dateMathUtil.getEarlyTime();
        add.endDate =  dateMathUtil.getLaterTime();
    }
    var addCond = "";
    addCond = "and createTime>=" + dateMathUtil.getTimestamp(add.startDate) + " and createTime<=" + dateMathUtil.getTimestamp(add.endDate);
    //页面显示时间格式
    add.startDate = moment(add.startDate).format("YYYY-MM-DD");
    add.endDate =  moment(add.endDate).format("YYYY-MM-DD");

    //请求条件
    backBodyNode.cond.customerId = headNode.userId;
    var reqDate = backBodyNode.cond;
    var cond = "";
    for (var key in reqDate) {
        cond += "and " + key + "='" + reqDate[key]+"'";
    }
    //分页
    var pageCond="limit "+backBodyNode.skip+","+backBodyNode.limit;

    //链接查询
    var conn = dc.main.getConn();
    if (dc.main.type == esdb.prop.dbType.mysql) {
        var sql = "select gameCode,count(outerId) as salenum,sum(amount) as saleamount,(select count(outerId) from tticket B where A.gameCode=B.gameCode and A.customerId=B.customerId and B.status=1200 "+ addCond+") as prizenum ,(select sum(bonus) from tticket C where A.gameCode=C.gameCode and A.customerId=C.customerId and C.status=1200 "+ addCond+") as prizeamount from tticket A where 1=1 " + cond +"  "+ addCond+" group by gamecode  "+pageCond;
        console.log("sql: "+sql);
        conn.execute(sql, {}, function (err, data) {
            if(err){
                console.log(err);
            }else{
            backBodyNode.rst = data;
            backBodyNode.count = data.length;
            cb(null, backBodyNode);
            }
        });
    } else {

        //其他数据类型

    }
}


SalePageControl.prototype.print = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {title: "view print"};
    pageUtil.parse(bodyNode, backBodyNode);
    backBodyNode.cond.customerId = headNode.userId;
    backBodyNode.game = game.getInfo();
    backBodyNode.sort={id: -1};
    var add = backBodyNode.add;
    if (add.startDate != null && add.endDate != null && add.startDate != "" && add.endDate != "") {
        add.startDate = dateMathUtil.getEarlyTime(add.startDate);
        add.endDate =  dateMathUtil.getLaterTime(add.endDate);
        backBodyNode.cond.createTime = {$gte: add.startDate, $lte: add.endDate};
        //页面显示时间格式
        add.startDate = moment(add.startDate).format("YYYY-MM-DD");
        add.endDate =  moment(add.endDate).format("YYYY-MM-DD");
    }

    async.waterfall([
        function (cb) {
            var table = dc.main.get("tticket");
            var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
            cursor.dateToString();
            cursor.toArray(function (err, data) {
                for (var key in data) {
                    var set = data[key];
                    set.game = game.getInfo(set.gameCode);
                    set.printStatus = ticketPrintStatus.getInfoById(set.printStatus);
                }
                backBodyNode.rst = data;
                backBodyNode.count = cursor.count(function (err, count) {
                    backBodyNode.count = count;
                    cb(null, data);
                });
            });
        }, function (ttickets, cb) {
            async.each(ttickets, function (row, callback) {
                var table = dc.main.get("torder");
                table.findOne({id: row.orderId}, {}, [], function (err, data) {
                    if (err) {
                        callback(ec.E0999);
                    }
                    else {
                        if (data) {
                            row.orderId = data.outerId;
                        }
                        callback();
                    }
                });
            }, function (err) {
                cb(err);
            })
        }

    ], function (err) {
        cb(err, backBodyNode);
    })

}


SalePageControl.prototype.money = function (headNode, bodyNode, cb) {

    var self = this;
    var backBodyNode = {title:"账户流水查询"};
    if(bodyNode.sort == undefined)
    {
        backBodyNode.sort = {createTime:-1};
    }
    pageUtil.parse(bodyNode, backBodyNode);
    var table = dc.main.get("moneylog");
    backBodyNode.cond.customerId = headNode.userId;

    //页面显示科目查询项
    var selectValues=accountSelect.getInfoByCode(headNode.userType);
    backBodyNode.selectValues=JSON.stringify(selectValues.accounts);
    var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.subject = ac.getInfo(set.roleId, set.accountId, set.typeId, set.subjectId);
            set.createTime = moment(set.createTime).format("YYYY-MM-DD HH:mm:ss")
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });

}

module.exports = new SalePageControl();