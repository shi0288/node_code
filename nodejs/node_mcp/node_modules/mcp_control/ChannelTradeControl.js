var async = require('async');
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;

var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userType = cons.userType;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var ticketPrintQueenStatus = cons.ticketPrintQueenStatus;
var ticketStatus = cons.ticketStatus;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require("mcp_service");
var digestSer = service.digestSer;
var moneySer = service.moneySer;
var kvSer = service.kvSer;

var validateFac = require("mcp_cp").validateFac;

var ChannelTradeControl = function(){
    var self = this;
    self.cmd = {'CT01':1, 'CT02':2, 'CT03':3, 'CT04':4,
    'CT05':5};
    self.cmdArray = [{},
        {id:1, code:'CT01', fromType:prop.digestFromType.FIX, des:""},
        {id:2, code:'CT02', fromType:prop.digestFromType.FIX, des:""},
        {id:3, code:'CT03', fromType:prop.digestFromType.FIX, des:"投注"},
        {id:4, code:'CT04', fromType:prop.digestFromType.FIX, des:""},
        {id:5, code:'CT05', fromType:prop.digestFromType.FIX, des:""}
    ];
};

ChannelTradeControl.prototype.handle = function(headNode, bodyStr, userCb)
{
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function(cb)
        {
            var cmd = self.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec.E9000);
            }
            else
            {
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            digestSer.getKey({fromType:cmd.fromType, userId:headNode.userId, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //先解密
        function(key, cb)
        {
            log.info(key);
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if(decodedBodyStr == null)
            {
                cb(ec.E9003);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err)
            {
                cb(ec.E9003);
                return;
            }
            cb(null, bodyNode);
        },
        //check the param
        function(bodyNode, cb){
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function(err){
                if(err)
                {
                    cb(err, {uniqueId:bodyNode.uniqueId});
                }
                else
                {
                    cb(err, bodyNode);
                }
            });
        },
        //业务处理
        function(bodyNode, cb){
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


ChannelTradeControl.prototype.checkCT01 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT02 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT03 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var order = bodyNode.order;
    //订单不能为空
    if(order == undefined || order == null)
    {
        cb(ec.E2070, null);
        return;
    }
    order.customerId = headNode.userId;
    validateFac.validate(order, cb);
};

ChannelTradeControl.prototype.checkCT04 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT05 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT06 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT07 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT08 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


ChannelTradeControl.prototype.checkCT09 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


/**
 * find one's all operations
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT01 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 获取权限树
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT02 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 渠道投注接口
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT03 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var now = new Date().getTime();
    var customerId = headNode.userId;
    var order = bodyNode.order;
    var tickets = bodyNode.order.tickets;
    var trueAmount = 0;
    for(var key in tickets)
    {
        if(tickets[key].ec.repCode == ec.E0000.repCode)
        {
            trueAmount += tickets[key].amount;
        }
        else
        {
            log.info(tickets[key]);
        }
    }
    order.trueAmount = trueAmount;
    if(trueAmount <= 0)     //如果订单失败，记录每个票据失败的原因，直接返回
    {
        var backOrder = {};
        backOrder.outerId = order.outerId;
        backOrder.amount = order.amount;
        backOrder.trueAmount = order.trueAmount;
        var backTickets = [];
        for(var key in tickets)
        {
            var ticket = tickets[key];
            backTickets[backTickets.length] = {outerId:ticket.outerId,
                amount:ticket.amount, repCode:ticket.ec.repCode,
                description:ticket.ec.description};
        }
        backOrder.tickets = backTickets;
        backBodyNode.order = backOrder;
        cb(ec.E2069, backBodyNode);
        return;
    }
    async.waterfall([
        //生成订单号
        function(cb)
        {
            kvSer.getOrderId(function(err, data){
                cb(err, data);
            });
        },
        //扣款
        function(kv, cb)
        {
            order.id = kv.value;
            moneySer.handle(customerId, order.id, "channel", "cash", "out", "lot", order.trueAmount, {}, function(err, data){
                log.info(data);
                cb(err);
            });
        },
        //保存订单
        function(cb)
        {
            var table = dc.main.get("torder");
            order.createTime = now;
            table.save(order, [], function(err, data){
                cb(err, order);
            });
        },
        //保存票据
        function(order, cb)
        {
            var table = dc.main.get("tticket");
            var tickets = bodyNode.order.tickets;
            async.each(tickets, function(ticket, callback) {
                ticket.createTime = now;
                //如果未设置审计时间，则使用创建时间
                if(ticket.auditTime == undefined || ticket.auditTime == null)
                {
                    ticket.auditTime = now;
                }
                else
                {
                    ticket.auditTime = dateUtil.toDate(ticket.auditTime).getTime();
                }
                ticket.customerId = customerId;
                ticket.bonus = 0;
                ticket.bonusBeforeTax = 0;
                ticket.orderId = order.id;

                if(ticket.ec.repCode != ec.E0000.repCode)
                {
                    ticket.id = '';
                    callback();
                    return;
                }
                table.save(ticket, [], function(err, data){
                    log.info(err);
                    if(data)
                    {
                        ticket.id = data.insertId;
                    }
                    callback(err);
                });
            }, function(err){
                cb(err, order, tickets);
            });
        },
        //保存到出票队列
        function(order, tickets, cb)
        {
            var table = dc.mg.get("printqueen");
            async.each(tickets, function(ticket, callback) {
                //只有成功的票才能保存到出票队列
                if(ticket.ec.repCode != ec.E0000.repCode)
                {
                    callback();
                    return;
                }
                var pTicket = {_id:ticket.id, gameCode:ticket.gameCode, termCode:ticket.termCode, customerId:ticket.customerId,
                pType:ticket.pType, bType:ticket.bType, printId:ticket.printId, multiple:ticket.multiple,
                amount:ticket.amount, number:ticket.number, outerId:ticket.outerId, status:ticketStatus.UN_OPEN,
                printStatus:ticket.printStatus, printQueenStatus:ticketPrintQueenStatus.WAITING_GET, createTime:ticket.createTime};
                table.save(pTicket, [], function(err, data){
                    callback(err);
                });
            }, function(err){
                cb(err, order, tickets);
            });
        }
    ], function (err, order, tickets) {
        if(err)
        {
            cb(err, backBodyNode);
        }
        else
        {
            var backOrder = {};
            backOrder.id = order.id;
            backOrder.outerId = order.outerId;
            backOrder.amount = order.amount;
            backOrder.trueAmount = order.trueAmount;

            var backTickets = [];
            for(var key in tickets)
            {
                var ticket = tickets[key];
                backTickets[backTickets.length] = {id:ticket.id, outerId:ticket.outerId,
                amount:ticket.amount, repCode:ticket.ec.repCode,
                description:ticket.ec.description};
            }
            backOrder.tickets = backTickets;
            backBodyNode.order = backOrder;
            cb(err, backBodyNode);
        }
    });
};

/**
 * 删除消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT04 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 修改期次
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT05 = function(user, headNode, bodyNode, cb)
{
};

var channelTradeControl = new ChannelTradeControl();
module.exports = channelTradeControl;