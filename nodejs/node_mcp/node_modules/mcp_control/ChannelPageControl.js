var async = require('async');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var digestUtil = esut.digestUtil;

var service = require("mcp_service");
var digestSer = service.digestSer;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var cons = require('mcp_constants');
var userType = cons.userType;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var errUrl = cons.errUrl;

var ChannelPageControl = function(){};

ChannelPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    var self = this;
    var cmd = headNode.cmd;
    async.waterfall([
        //校验是否结束会话
        function (cb) {

            var userId = headNode.userId;
            if(userId == undefined)
            {
                if(headNode.userType!=undefined){
                    var userTypeId = userType[headNode.userType];
                    ec.E9006.url=errUrl.getInfoById(userTypeId).url;
                }
                cb(ec.E9006);
            }else{
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var fromType = prop.digestFromType.CACHE;
            digestSer.getKey({fromType:fromType, userId:headNode.userId, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //校验密钥并处理逻辑
        function(key, cb)
        {
            if(key != headNode.key)
            {
                cb(ec.E9003);
            }
            else
            {
                self[cmd[1]](headNode, bodyNode, cb);
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
};

ChannelPageControl.prototype.index = function(headNode, bodyNode, cb)
{
    var self = this;
    cb(null, {});
};

ChannelPageControl.prototype.top = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"top"};
    async.waterfall([
        function(cb){
            var table = dc.main.get("customer");
            var cond = {id:headNode.userId};
            table.findOne(cond, {}, [], function(err, data){
                if(data)
                {
                    data.type = userType.getInfoById(data.type);
                    cb(null, data);
                }
                else
                {
                    cb(err);
                }
            });
        },
        function(channel, cb) {
            backBodyNode.channel = channel;
            var table = dc.mg.get("account");
            table.findOne({_id:channel.id}, {}, [], function(err, data){
                if(data)
                {
                    channel.balance = data.balance;
                }
                cb(null);
            });
        }
    ], function (err) {
        cb(err, backBodyNode);
    });
};

ChannelPageControl.prototype.left = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    var userTypeId = userType[headNode.userType];
    var cond={userType:userTypeId};
    cond={version:1};
    backBodyNode.sort = {level:1};
    var table = dc.main.get("operation");
    var cursor = table.find(cond, {}, []).sort(backBodyNode.sort);
    cursor.toArray(function(err, data){
        backBodyNode.rst = data;
        cb(null, backBodyNode);
    });
};



ChannelPageControl.prototype.main = function(headNode, bodyNode, cb)
{
    var self = this;
    cb(null, {});
};

ChannelPageControl.prototype.foot = function(headNode, bodyNode, cb)
{
    var self = this;
    cb(null, {});
};




ChannelPageControl.prototype.changepsw = function(headNode, bodyNode, cb)
{
    var self = this;
    cb(null, {});
};

/**
 * 渠道查看自己的信息
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelPageControl.prototype.myinfo = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"用户详情"};
    async.waterfall([
        function(cb){
            var table = dc.main.get("customer");
            var cond = {id:headNode.userId};
            table.findOne(cond, {}, [], function(err, data){
                if(data)
                {
                    data.type = userType.getInfoById(data.type);
                    cb(null, data);
                }
                else
                {
                    cb(err);
                }
            });
        },
        function(channel, cb) {
            backBodyNode.channel = channel;
            var table = dc.mg.get("account");
            table.findOne({_id:channel.id}, {}, [], function(err, data){
                if(data)
                {
                    channel.balance = data.balance;
                }
                cb(null);
            });
        }
    ], function (err) {
        cb(err, backBodyNode);
    });
};





var channelPageControl = new ChannelPageControl();
module.exports = channelPageControl;