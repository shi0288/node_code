var dc = require('mcp_db').dc;
var moment = require('moment');
var async = require('async');

var config = require('mcp_config');
var game = config.game;
var prop = config.prop;
var ec = config.ec;

var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;

var service = require("mcp_service");
var digestSer = service.digestSer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var ticketPrintQueenStatus = cons.ticketPrintQueenStatus;
var userType = cons.userType;
var errUrl = cons.errUrl;

var util = require('mcp_util');
var dateMathUtil = util.dateMathUtil;

var PrintPageControl = function () {
};

PrintPageControl.prototype.handle = function (headNode, bodyNode, cb) {
    var self = this;
    var cmd = headNode.cmd;
    async.waterfall([
        //校验是否结束会话
        function (cb) {

            var userId = headNode.userId;
            if (userId == undefined) {
                if (headNode.userType != undefined) {
                    var userTypeId = userType[headNode.userType];
                    ec.E9006.url = errUrl.getInfoById(userTypeId).url;
                }
                cb(ec.E9006);
            } else {
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9005);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            var fromType = prop.digestFromType.CACHE;
            digestSer.getKey({fromType: fromType, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //校验密钥并处理逻辑
        function (key, cb) {
            if (key != headNode.key) {
                cb(ec.E9003);
            }
            else {
                self[cmd[1]](headNode, bodyNode, cb);
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
};

PrintPageControl.prototype.queenList = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {title: "出票队列"};
    log.info(bodyNode);
    backBodyNode.sort = {_id: -1};
    pageUtil.parse(bodyNode, backBodyNode);
    var table = dc.mg.get("printqueen");
    var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
    cursor.toArray(function (err, data) {
        for (var key in data) {
            var set = data[key];
            set.printQueenStatus = ticketPrintQueenStatus.getInfoById(set.printQueenStatus);
            set.createTime = dateUtil.toString(set.createTime);
            set.takeTime = dateUtil.toString(set.takeTime);
            set.game = game.getInfo(set.gameCode);
            set.playType = game.getInfo(set.gameCode, set.pType);
            set.betType = game.getInfo(set.gameCode, set.pType, set.bType);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function (err, count) {
            backBodyNode.count = count;
            var _sort = {createTime: 1};
            var _msg = {_id: 1, customerId: 1, printId: 1, gameCode: 1, termCode: 1, amount: 1, createTime: 1}
            var _cursor = table.find(backBodyNode.cond, _msg, []).sort(_sort).skip(0).limit(5);
            _cursor.toArray(function (err, data) {
                for (var key in data) {
                    var set = data[key];
                    set.info = dateMathUtil.secondBetween(moment(set.createTime).format("YYYY-MM-DD HH:mm:ss"));
                    set.game = game.getInfo(set.gameCode);
                    set.createTime = moment(set.createTime).format("YYYY-MM-DD HH:mm:ss");
                }
                backBodyNode.laterCount=data.length;
                backBodyNode.msg = data;
                cb(null, backBodyNode);
            });

        });
    });
};

module.exports = new PrintPageControl();