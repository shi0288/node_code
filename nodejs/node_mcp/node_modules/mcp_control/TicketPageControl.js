var esut = require('easy_util');
var dc = require('mcp_db').dc;

var config = require('mcp_config');
var game = config.game;
var prop = config.prop;
var ec = config.ec;

var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;
var async = require('async');
var service = require("mcp_service");
var digestSer = service.digestSer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var ticketStatus = cons.ticketStatus;
var ticketPrintStatus = cons.ticketPrintStatus;
var gameGrade = cons.gameGrade;
var userType = cons.userType;
var errUrl = cons.errUrl;


var TicketPageControl = function(){};

TicketPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    var self = this;
    var cmd = headNode.cmd;
    async.waterfall([
        //校验是否结束会话
        function (cb) {

            var userId = headNode.userId;
            if(userId == undefined)
            {
                if(headNode.userType!=undefined){
                    var userTypeId = userType[headNode.userType];
                    ec.E9006.url=errUrl.getInfoById(userTypeId).url;
                }
                cb(ec.E9006);
            }else{
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var fromType = prop.digestFromType.CACHE;
            digestSer.getKey({fromType:fromType, userId:headNode.userId, userType:userTypeId},
                function(err, key){
                    cb(err, key);
                });
        },
        //校验密钥并处理逻辑
        function(key, cb)
        {
            if(key != headNode.key)
            {
                cb(ec.E9003);
            }
            else
            {
                self[cmd[1]](headNode, bodyNode, cb);
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
};

TicketPageControl.prototype.list = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    backBodyNode.sort = {id:-1};
    pageUtil.parse(bodyNode, backBodyNode);
    backBodyNode.ticketStatus = ticketStatus.getInfoById();
    backBodyNode.ticketPrintStatus = ticketPrintStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    var table = dc.main.get("tticket");
    var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
    cursor.dateToString();
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.status = ticketStatus.getInfoById(set.status);
            set.printStatus = ticketPrintStatus.getInfoById(set.printStatus);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};

TicketPageControl.prototype.drawList = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"查看算奖队列"};
    pageUtil.parse(bodyNode, backBodyNode);
    var cond = backBodyNode.cond;
    var sep = cond.sep;
    var gameCode = cond.gameCode;
    var termCode = cond.termCode;
    if(sep == undefined)
    {
        sep = 0;
    }
    else
    {
        delete cond.sep;
    }
    backBodyNode.games = game.getInfo();

    var seps = [];
    for(var i = 0; i < prop.drawCount; i++)
    {
        seps[seps.length] = {id:i, des:i};
    }
    backBodyNode.seps = seps;

    //缺少必要条件则直接返回空记录
    if(gameCode == undefined || termCode == undefined)
    {
        backBodyNode.rst = [];
        backBodyNode.count = 0;
        cb(null, backBodyNode);
        return;
    }
    var colName = gameCode + "_" + termCode + "_" + sep;
    delete cond.gameCode;
    delete cond.termCode;

    var table = dc.mg.getConn().collection(colName);
    var cursor = table.find(cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.cond.sep = sep;
            backBodyNode.cond.gameCode = gameCode;
            backBodyNode.cond.termCode = termCode;
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
}

TicketPageControl.prototype.detail = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"票据详情"};
    var table = dc.main.get("tticket");
    table.findOne({id:bodyNode.id}, {}, [], function(err, data){
        data.printStatus = ticketPrintStatus.getInfoById(data.printStatus);
        data.status = ticketStatus.getInfoById(data.status);
        data.pTypeDetail = game.getInfo(data.gameCode, data.pType);
        data.bTypeDetail = game.getInfo(data.gameCode, data.pType, data.bType);
        if(data.bonusDetail.length > 0)
        {
            data.bonusDetail = JSON.parse(data.bonusDetail);
        }
        else
        {
            data.bonusDetail = [];
        }
        for(var key in data.bonusDetail)
        {
            var set = data.bonusDetail[key];
            set.gameGrade = gameGrade.getInfoById(data.gameCode, 'lv' + set.level);
        }
        backBodyNode.entity = data;
        cb(null, backBodyNode);
    }, {dateToString:true});
}

module.exports = new TicketPageControl();