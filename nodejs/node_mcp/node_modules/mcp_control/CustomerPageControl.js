var dc = require('mcp_db').dc;
var config = require('mcp_config');
var game = config.game;
var prop = config.prop;
var ec = config.ec;
var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;

var async = require('async');
var service = require("mcp_service");
var digestSer = service.digestSer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var userType = cons.userType;
var errUrl = cons.errUrl;
var customerStatus = cons.customerStatus;
var digestType = cons.digestType;

var CustomerPageControl = function(){};

CustomerPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    var self = this;
    var cmd = headNode.cmd;
    async.waterfall([
        //校验是否结束会话
        function (cb) {

            var userId = headNode.userId;
            if(userId == undefined)
            {
                if(headNode.userType!=undefined){
                    var userTypeId = userType[headNode.userType];
                    ec.E9006.url=errUrl.getInfoById(userTypeId).url;
                }
                cb(ec.E9006);
            }else{
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var fromType = prop.digestFromType.CACHE;
            digestSer.getKey({fromType:fromType, userId:headNode.userId, userType:userTypeId},
                function(err, key){
                    cb(err, key);
                });
        },
        //校验密钥并处理逻辑
        function(key, cb)
        {
            if(key != headNode.key)
            {
                cb(ec.E9003);
            }
            else
            {
                self[cmd[1]](headNode, bodyNode, cb);
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
};

CustomerPageControl.prototype.list = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"用户列表"};
    pageUtil.parse(bodyNode, backBodyNode);
    backBodyNode.userType = userType.getInfoById();
    async.waterfall([
        function(cb)
        {
            var table = dc.main.get("customer");
            var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
            cursor.dateToString();
            cursor.toArray(function(err, data){
                for(var key in data)
                {
                    var set = data[key];
                    set.type = userType.getInfoById(set.type);
                }
                backBodyNode.count = cursor.count(function(err, count){
                backBodyNode.count = count;
                cb(null, data);
                });
            });
        }, function (customers,cb) {
            async.each(customers, function (row, callback) {
                var accountTable = dc.mg.get("account");
                accountTable.findOne({_id:row.id}, {}, [], function(err, data){
                    if (err) {
                        callback(ec.E0999);
                    }
                    else
                    {
                        if(data){
                            row.balance = data.balance;
                        }
                        callback();
                    }
                });
            }, function (err) {
                backBodyNode.rst = customers;
                cb(null,customers)
            })
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
};

/**
 * 查看用户详情
 * @param headNode
 * @param bodyNode
 * @param cb
 */
CustomerPageControl.prototype.detail = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"用户详情"};
    backBodyNode.digestType = digestType.getInfoById();
    async.waterfall([
        function(cb)
        {
            var table = dc.main.get("customer");
            var cond = {id:bodyNode.id};
            table.findOne(cond, {}, [], function(err, data){
                if(data)
                {
                    backBodyNode.customer = data;
                }
                cb(err, data);
            });
        },
        function(customer, cb)
        {
            var table = dc.mg.get("stInfo");
            table.findOne({_id:customer.id}, {}, [], function(err, data){
                if(data)
                {
                    customer.fixSt = data.fixSt;
                }
                cb(err, customer);
            });
        },
        function(customer, cb)
        {
            var table = dc.mg.get("cus_config");
            table.findOne({_id:customer.id}, {}, [], function(err, data){
                if(data)
                {
                    customer.notifyIp = data.notifyIp;
                    customer.notifyPort = data.notifyPort;
                    customer.notifyPath = data.notifyPath;
                    customer.notifyKey = data.notifyKey;
                    customer.digestType = data.digestType;
                }
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
};

/**
 * 新增用户
 * @param headNode
 * @param bodyNode
 * @param cb
 */
CustomerPageControl.prototype.add = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"添加用户"};
    backBodyNode.userType = userType.getInfoById();
    cb(null, backBodyNode);
};

CustomerPageControl.prototype.select = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"投注站选择"};
    if(bodyNode.sort == undefined)
    {
        backBodyNode.sort = {id:1};
    }
    backBodyNode.select = bodyNode.select;
    pageUtil.parse(bodyNode, backBodyNode);
    var table = dc.main.get("customer");
    var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
    cursor.dateToString();
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};

module.exports = new CustomerPageControl();