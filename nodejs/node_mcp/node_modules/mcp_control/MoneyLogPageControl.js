var moment = require("moment");
var async = require('async');
var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;

var service = require("mcp_service");
var digestSer = service.digestSer;

var util = require('mcp_util');
var dateMathUtil=util.dateMathUtil;

var dc = require('mcp_db').dc;

var config = require("mcp_config");
var ec = config.ec;
var ac = config.ac;
var game = config.game;
var prop = config.prop;

var cons = require("mcp_constants");
var gameType = cons.gameType;
var accountSelect = cons.accountSelect;
var userType = cons.userType;
var errUrl = cons.errUrl;

var MoneyLogPageControl = function(){};

MoneyLogPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    var self = this;
    var cmd = headNode.cmd;
    async.waterfall([
        //校验是否结束会话
        function (cb) {

            var userId = headNode.userId;
            if(userId == undefined)
            {
                if(headNode.userType!=undefined){
                    var userTypeId = userType[headNode.userType];
                    ec.E9006.url=errUrl.getInfoById(userTypeId).url;
                }
                cb(ec.E9006);
            }else{
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var fromType = prop.digestFromType.CACHE;
            digestSer.getKey({fromType:fromType, userId:headNode.userId, userType:userTypeId},
                function(err, key){
                    cb(err, key);
                });
        },
        //校验密钥并处理逻辑
        function(key, cb)
        {
            if(key != headNode.key)
            {
                cb(ec.E9003);
            }
            else
            {
                self[cmd[1]](headNode, bodyNode, cb);
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
};

MoneyLogPageControl.prototype.add = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"新增账户流水"};
    backBodyNode.customerId=bodyNode.customerId;
    cb(null, backBodyNode);
};

MoneyLogPageControl.prototype.detail = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"账户流水详情"};
    cb(null, backBodyNode);
};

MoneyLogPageControl.prototype.list = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"账户流水查询"};
    if(bodyNode.sort == undefined)
    {
        backBodyNode.sort = {createTime:-1};
    }
    pageUtil.parse(bodyNode, backBodyNode);
    log.info(backBodyNode);
    var table = dc.main.get("moneylog");
    //页面显示科目查询项
    var selectValues=accountSelect.getInfoByCode(headNode.userType);
    backBodyNode.selectValues=JSON.stringify(selectValues.accounts);
    var add = backBodyNode.add;
    if (add.startDate != null && add.endDate != null && add.startDate != "" && add.endDate != "") {
        add.startDate = dateMathUtil.getEarlyTime(add.startDate);
        add.endDate =  dateMathUtil.getLaterTime(add.endDate);
        backBodyNode.cond.createTime = {$gte: add.startDate, $lte: add.endDate};
        //页面显示时间格式
        add.startDate = moment(add.startDate).format("YYYY-MM-DD");
        add.endDate =  moment(add.endDate).format("YYYY-MM-DD");
    }

    var sqlCondition = table.condition(backBodyNode.cond);
    var sql = "select sum(amount) as amount,typeId from moneylog where " + sqlCondition + " group by typeId";
    log.info(sql);
    var conn = dc.main.getConn();
    conn.execute(sql, [], function(err ,data){
        if(err)
        {
            log.error(err);
        }

        backBodyNode.inAmount = 0;
        backBodyNode.outAmount = 0;
        if(data)    //设置统计信息到界面
        {
            for(var i = 0; i < data.length; i++)
            {
                var set = data[i];
                if(set.typeId == '0')
                {
                    backBodyNode.inAmount = set.amount;
                }
                else if(set.typeId == '1')
                {
                    backBodyNode.outAmount = (-1)*set.amount;
                }
            }
        }

        console.log("moneylog:" +JSON.stringify(backBodyNode.cond.createTime));
        var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
        cursor.toArray(function(err, data){
            for(var key in data)
            {
                var set = data[key];
                set.subject = ac.getInfo(set.roleId, set.accountId, set.typeId, set.subjectId);
                set.createTime = moment(set.createTime).format("YYYY-MM-DD HH:mm:ss")
            }
            backBodyNode.rst = data;
            backBodyNode.count = cursor.count(function(err, count){
                backBodyNode.count = count;
                cb(null, backBodyNode);
            });
        });

    });
};

MoneyLogPageControl.prototype.subjectList = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"查看系统账户科目"};
    backBodyNode.rst = ac.getInfo();
    cb(null, backBodyNode);
};

MoneyLogPageControl.prototype.selectSubject = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"选择科目"};
    backBodyNode.select = bodyNode.select;
    backBodyNode.rst = ac.getInfo();
    cb(null, backBodyNode);
};

MoneyLogPageControl.prototype.dblist = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"游戏查询"};
    pageUtil.parse(bodyNode, backBodyNode);
    var table = dc.main.get("game");
    var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.status = gameStatus.getInfoById(set.status);
            set.type = gameType.getInfoById(set.type);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};

module.exports = new MoneyLogPageControl();