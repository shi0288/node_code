var esut = require('easy_util');
var dc = require('mcp_db').dc;

var config = require('mcp_config');
var game = config.game;
var prop = config.prop;
var ec = config.ec;
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;
var async = require('async');


var service = require("mcp_service");
var digestSer = service.digestSer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var termStatusForPage = cons.termStatusForPage;
var userType = cons.userType;
var msgStatus = cons.msgStatus;
var gameGrade = cons.gameGrade;
var errUrl = cons.errUrl;
var msgType = cons.msgType;

var TermPageControl = function(){};

TermPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    var self = this;
    var cmd = headNode.cmd;
    async.waterfall([
        //校验是否结束会话
        function (cb) {
            var userId = headNode.userId;
            if(userId == undefined)
            {
                if(headNode.userType!=undefined){
                    var userTypeId = userType[headNode.userType];
                    ec.E9006.url=errUrl.getInfoById(userTypeId).url;
                }
                cb(ec.E9006);
            }else{
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var fromType = prop.digestFromType.CACHE;
            digestSer.getKey({fromType:fromType, userId:headNode.userId, userType:userTypeId},
                function(err, key){
                    cb(err, key);
                });
        },
        //校验密钥并处理逻辑
        function(key, cb)
        {
            if(key != headNode.key)
            {
                cb(ec.E9003);
            }
            else
            {
                self[cmd[1]](headNode, bodyNode, cb);
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
};

TermPageControl.prototype.list = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    backBodyNode.sort = {id:-1};
    pageUtil.parse(bodyNode, backBodyNode);
    backBodyNode.termStatusObj = termStatusForPage;
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    var add = backBodyNode.add;
    if(add.startTermStatus > -1 && add.endTermStatus > -1)
    {
        backBodyNode.cond.status = {$gte:add.startTermStatus, $lte:add.endTermStatus};
    }
    else if(add.startTermStatus || add.endTermStatus)
    {
        if(add.startTermStatus > -1)
        {
            backBodyNode.cond.status = add.startTermStatus;
        }
        if(add.endTermStatus > -1)
        {
            backBodyNode.cond.status = add.endTermStatus;
        }
    }
    else
    {
        add.startTermStatus = termStatus.PRE_ON_SALE;
        add.endTermStatus = termStatus.IN_SEAL;
        backBodyNode.cond.status = {$gte:add.startTermStatus, $lte:add.endTermStatus};
    }
    var termTable = dc.main.get("term");
    var cursor = termTable.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
    cursor.dateToString();
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.game = game.getInfo(set.gameCode);
            set.status = termStatus.getInfoById(set.status);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};

TermPageControl.prototype.msgList = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    backBodyNode.game = game.getInfo();
    backBodyNode.sort = {_id:-1};
    pageUtil.parse(bodyNode, backBodyNode);
    async.waterfall([
        function(cb)
        {
            var termTable = dc.mg_msg.get("detail_term");
            var cursor = termTable.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
            cursor.toArray(function(err, data){
                if(err)
                {
                    cb(ec.E0999);
                }
                else
                {
                    for(var key in data)
                    {
                        var set = data[key];
                        set.game = game.getInfo(set.gameCode);
                        set.status = termStatus.getInfoById(set.status);
                    }
                    backBodyNode.rst = data;
                    backBodyNode.count = cursor.count(function(err, count){
                        backBodyNode.count = count;
                        cb(null, data);
                    });
                }
            });
        },
        function(details, cb)
        {
            async.eachSeries(details, function(row, callback) {
                var table = dc.mg_msg.get("msg");
                table.findOne({_id:row.msgId}, {}, [], function(err, data){
                    if(err)
                    {
                        callback(ec.E0999);
                    }
                    else
                    {
                        data.status = msgStatus.getInfoById(data.status);
                        data.createTime = dateUtil.toString(data.createTime);
                        data.finishTime = dateUtil.toString(data.finishTime);
                        data.type = msgType.getInfoById(data.type);
                        row.msg = data;
                        callback();
                    }
                });
            }, function(err){
                cb(err);
            });
        }
    ], function (err, result) {
        //log.info(backBodyNode);
        cb(err, backBodyNode);
    });
};

TermPageControl.prototype.detail = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次详情"};
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    var table = dc.main.get("term");
    table.findOne({id:bodyNode.id}, {}, [], function(err, data){
        data.game = game.getInfo(data.gameCode);
        backBodyNode.term = data;
        cb(null, backBodyNode);
    }, {dateToString:true});
};

TermPageControl.prototype.draw = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次开奖"};
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    async.waterfall([
        function(cb)
        {
            var table = dc.main.get("term");
            table.findOne({id:bodyNode.id}, {}, [], function(err, data){
                data.game = game.getInfo(data.gameCode);
                backBodyNode.term = data;
                cb(err, data);
            }, {dateToString:true});
        },
        //查看是否有奖级信息
        function(term, cb)
        {
            var table = dc.main.get("gamegrade");
            var cond = {gameCode:term.gameCode, termCode:term.code};
            var cursor = table.find(cond, {}, []);
            cursor.count(function(err, count){
                if(count == 0)  //没有奖级信息，从模板导入
                {
                    var grades = gameGrade.getInfoById(term.gameCode).grades;
                    async.each(grades, function(grade, callback) {
                        var gg = {name:grade.des, gameCode:term.gameCode, termCode:term.code,
                        level:grade.id, bonus:grade.bonus, count:0};
                        gg.id = gg.gameCode + "_" + gg.termCode + "_" + gg.level;
                        table.save(gg, {}, function(err, data){
                            if(err)
                            {
                                log.info(err);
                            }
                            callback();
                        });
                    }, function(err){
                        cb(err, term);
                    });
                }
                else
                {
                    cb(null, term);
                }
            });
        },
        function(term, cb)
        {
            var table = dc.main.get("gamegrade");
            var cond = {gameCode:term.gameCode, termCode:term.code};
            var sort = {level:1};
            var cursor = table.find(cond, {}, []).sort(sort);
            cursor.dateToString();
            cursor.toArray(function(err, data){
                backBodyNode.rst = data;
                cb(err, data);
            });
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
}

TermPageControl.prototype.drawConfirm = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次开奖确认"};
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    async.waterfall([
        function(cb)
        {
            var table = dc.main.get("term");
            table.findOne({id:bodyNode.id}, {}, [], function(err, data){
                data.game = game.getInfo(data.gameCode);
                backBodyNode.term = data;
                cb(err, data);
            }, {dateToString:true});
        },
        function(term, cb)
        {
            var table = dc.main.get("gamegrade");
            var cond = {gameCode:term.gameCode, termCode:term.code};
            var sort = {level:1};
            var cursor = table.find(cond, {}, []).sort(sort);
            cursor.dateToString();
            cursor.toArray(function(err, data){
                backBodyNode.rst = data;
                cb(err, data);
            });
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
}

TermPageControl.prototype.add = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"新增期次"};
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    backBodyNode.curTime = dateUtil.getCurTime();
    cb(null, backBodyNode);
}

module.exports = new TermPageControl();