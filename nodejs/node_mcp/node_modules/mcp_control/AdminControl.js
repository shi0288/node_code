var async = require('async');
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userType = cons.userType;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var gameStatus = cons.gameStatus;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;
var ac = config.ac;

var service = require("mcp_service");
var digestSer = service.digestSer;
var moneySer = service.moneySer;
var termSer = service.termSer;
var notifySer = service.notifySer;

var AdminControl = function () {
    var self = this;
    self.cmd = {'AD01': 1, 'AD02': 2, 'AD03': 3, 'AD04': 4,
        'AD05': 5, 'AD06': 6, 'AD07': 7, 'AD08': 8, 'AD09': 9, 'AD10': 10, 'AD11': 11,
        'AD12': 12, 'AD13': 13, 'AD14': 14, 'AD15': 15, 'AD16': 16, 'AD17': 17,
        'AD18': 18, 'AD19': 19, 'AD20': 20};
    self.cmdArray = [
        {},
        {id: 1, code: 'AD01', fromType: prop.digestFromType.DB, des: "管理员登陆"},
        {id: 2, code: 'AD02', fromType: prop.digestFromType.CACHE, des: "获取权限树"},
        {id: 3, code: 'AD03', fromType: prop.digestFromType.CACHE, des: "修改消息"},
        {id: 4, code: 'AD04', fromType: prop.digestFromType.CACHE, des: "删除消息"},
        {id: 5, code: 'AD05', fromType: prop.digestFromType.CACHE, des: "修改期次"},
        {id: 6, code: 'AD06', fromType: prop.digestFromType.CACHE, des: "修改交易密钥"},
        {id: 7, code: 'AD07', fromType: prop.digestFromType.CACHE, des: "账户操作"},
        {id: 8, code: 'AD08', fromType: prop.digestFromType.CACHE, des: "新增用户"},
        {id: 9, code: 'AD09', fromType: prop.digestFromType.CACHE, des: "新增转发规则"},
        {id: 10, code: 'AD10', fromType: prop.digestFromType.CACHE, des: "期次开奖"},
        {id: 11, code: 'AD11', fromType: prop.digestFromType.CACHE, des: "修改通知地址"},
        {id: 12, code: 'AD12', fromType: prop.digestFromType.CACHE, des: "新增期次"},
        {id: 13, code: 'AD13', fromType: prop.digestFromType.CACHE, des: "更新奖级信息"},
        {id: 14, code: 'AD14', fromType: prop.digestFromType.CACHE, des: "删除主mg的表"},
        {id: 15, code: 'AD15', fromType: prop.digestFromType.CACHE, des: "清空数据库的表"},
        {id: 16, code: 'AD16', fromType: prop.digestFromType.CACHE, des: "删除mg_msg的表"},
        {id: 17, code: 'AD17', fromType: prop.digestFromType.CACHE, des: "修改出票转发规则"},
        {id: 18, code: 'AD18', fromType: prop.digestFromType.CACHE, des: "更新消息"},
        {id: 19, code: 'AD19', fromType: prop.digestFromType.CACHE, des: "修改密码"},
        {id: 20, code: 'AD20', fromType: prop.digestFromType.CACHE, des: "游戏开关"}
    ];
};

AdminControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            var cmd = self.cmd[headNode.cmd];
            if (cmd == undefined) {
                cb(ec.E9000);
            }
            else {
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9005);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            digestSer.getKey({fromType: cmd.fromType, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            log.info(key);
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            try {
                var bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
                cb(null, bodyNode);
            }
            catch (err) {
                cb(ec.E9003);
            }
        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


AdminControl.prototype.checkAD01 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD02 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD03 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD04 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD05 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD06 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD07 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD08 = function (user, headNode, bodyNode, cb) {
    cb(null);
};


AdminControl.prototype.checkAD09 = function (user, headNode, bodyNode, cb) {
    cb(null);
};


AdminControl.prototype.checkAD10 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD11 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD12 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD13 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD14 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD15 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD16 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD17 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD18 = function (user, headNode, bodyNode, cb) {
    cb(null);
};

AdminControl.prototype.checkAD19 = function (user, headNode, bodyNode, cb) {
    var passWord = bodyNode.password;
    var customerTable = dc.main.get("customer");
    customerTable.findOne({id: headNode.userId}, {}, [], function (err, data) {
        if (err) {
            log.info(err);
            cb(ec.E0999);
        } else {
            if (passWord != data.password) {
                cb(ec.E9003);
            }
        }
        cb(null);
    });
};

AdminControl.prototype.checkAD20 = function (user, headNode, bodyNode, cb) {
    cb(null);
};


/**
 * find one's all operations
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD01 = function (user, headNode, bodyNode, cb) {
    var stInfoTable = dc.mg.get("stInfo");
    stInfoTable.findOne({_id: headNode.userId}, {}, [], function (err, data) {
        if (data) {
            var newSt = data.st;
            var now = new Date();
            if (now.getTime() - data.lastActiveTime > prop.loginExpiredSeconds * 1000) {
                //expired
                newSt = digestUtil.createUUID();
            }
            stInfoTable.update({_id: headNode.userId}, {$set: {lastActiveTime: new Date().getTime(), st: newSt}},
                [], function (err, data) {
                    cb(null, {uniqueId: bodyNode.uniqueId, st: newSt});
                });
        }
        else {
            var st = digestUtil.createUUID();
            stInfoTable.save({_id: headNode.userId, st: st, lastActiveTime: new Date().getTime()}, [], function (err, data) {
                cb(null, {uniqueId: bodyNode.uniqueId, st: st});
            });
        }
    });
};

/**
 * 获取权限树
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD02 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var cond = bodyNode.cond;
    if (cond == undefined) {
        cond = {};
    }
    var userTypeId = userType[headNode.userType];
    cond.userType = userTypeId;
    var sort={level:1};
    var operationTable = dc.main.get("operation");
    operationTable.find(cond, {}).sort(sort).toArray(function (err, data) {
        if (data) {
            backBodyNode.rst = data;
        }
        cb(null, backBodyNode);
    });
};

/**
 * 修改消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD03 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var table = dc.mg_msg.get("msg");
    table.update(bodyNode.cond, bodyNode.data, [], function (err, data) {
        if (err) {
            log.info(err);
            cb(ec.E0999);
        }
        else {
            cb(err, backBodyNode);
        }
    });
};

/**
 * 删除消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD04 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var self = this;
    async.waterfall([
        function (cb) {
            var conn = dc.mg_msg.getConn();
            var table = conn.collection("msg");
            table.findAndRemove(bodyNode.cond, {}, [], function (err, data) {
                if (err) {
                    cb(ec.E0999);
                }
                else {
                    cb(err, data);
                }
            });
        },
        //删除详细
        function (msg, cb) {
            if (msg.type == msgType.TERM) {
                var detail = dc.mg_msg.get("detail_term");
                detail.remove({msgId: msg._id}, [], function (err, data) {
                    cb(err);
                });
            }
            else {
                cb(null);
            }
        }
    ], function (err, bodyNode) {
        cb(err, backBodyNode);
    });
};

/**
 * 修改期次
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD05 = function (user, headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var table = dc.main.get("term");
    table.update(bodyNode.cond, bodyNode.data, [], function (err, data) {
        if (err) {
            log.info(err);
            cb(ec.E0999);
        }
        else {
            cb(err, backBodyNode);
        }
    });
};

AdminControl.prototype.handleAD06 = function (user, headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var table = dc.mg.get("stInfo");
    table.update(bodyNode.cond, bodyNode.data, [], function (err, data) {
        if (err) {
            cb(ec.E0999);
        }
        else {
            log.info(data);
            cb(err, backBodyNode);
        }
    });
};

AdminControl.prototype.handleAD07 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var pageSubjectId = bodyNode.subjectId;
    var subject = ac.getInfoById(pageSubjectId);
    var roleId = pageSubjectId.substr(0, 2);
    var accountId = pageSubjectId.substr(2, 2);
    var typeId = pageSubjectId.substr(4, 1);
    var subjectId = pageSubjectId.substr(5, 4);
    var amount = bodyNode.amount;
    var orderId = bodyNode.orderId;
    var entityId = bodyNode.entityId;
    moneySer.handleById(entityId, orderId, roleId, accountId, typeId, subjectId, amount, {}, function (err, data) {
        log.info(err);
        log.info(data);
        cb(err, backBodyNode);
    });
};


/**
 * 新增用户
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD08 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    async.waterfall([
        //新增用户
        function (cb) {
            var table = dc.main.get("customer");
            table.save(bodyNode, [], function (err, data) {
                cb(err, bodyNode);
            });
        },
        //新增账户
        function (customer, cb) {
            var table = dc.mg.get("account");
            var account = {_id: customer.id, balance: 0, version: 0};
            table.save(account, [], function (err, data) {
                cb(err, customer);
            });
        },
        //初始化登陆信息
        function (customer, cb) {
            var table = dc.mg.get("stInfo");
            var stInfo = {_id: customer.id, st: digestUtil.createUUID(),
                fixSt: digestUtil.createUUID(), version: 0};
            table.save(stInfo, [], function (err, data) {
                cb(err);
            });
        }
    ], function (err, bodyNode) {
        cb(err, backBodyNode);
    });
};

/**
 * 新增游戏转发规则
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD09 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var data = bodyNode;
    data._id = data.customerId + "_" + data.gameCode;
    var table = dc.mg.get("relation");
    table.save(bodyNode, [], function (err, data) {
        cb(err, backBodyNode);
    });
};


/**
 * 期次开奖
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD10 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var table = dc.main.get("term");
    var fromTerm = {id: bodyNode.termId};
    async.waterfall([
        //更新期次状态
        function (cb) {
            termSer.draw(fromTerm, function (err, data) {
                cb(err, data);
            });
        },
        //发送期次已经开奖的消息
        function (term, cb) {
            notifySer.saveTerm(term, cb);
        }
    ], function (err, rst) {
        cb(err, backBodyNode);
    });
};

/**
 * 修改通知地址
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD11 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var table = dc.mg.get("cus_config");
    var cond = bodyNode.cond;
    var data = bodyNode.data;
    table.update(cond, data, {upsert: true}, function (err, data) {
        cb(err, backBodyNode);
    });
}


/**
 * 新增期次
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD12 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var table = dc.main.get("term");
    var term = bodyNode.term;
    term.id = term.gameCode + '_' + term.code;
    term.wNum = "09,12,22,32,34|02,04";
    table.save(term, [], function (err, data) {
        log.info(err);
        cb(err, backBodyNode);
    });
}

/**
 * 更新奖级信息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD13 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var table = dc.main.get("gamegrade");
    var cond = bodyNode.cond;
    var data = bodyNode.data;
    table.update(cond, data, {}, function (err, data) {
        cb(err, backBodyNode);
    });
}

/**
 * 删除主mg的表
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD14 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var name = bodyNode.cond.name;
    var trueName = name.split('.')[1];
    var conn = dc.mg.getConn();
    conn.dropCollection(trueName, function (err, data) {
        cb(err, backBodyNode);
    });
}

/**
 *
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD15 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var name = bodyNode.cond.name;
    var table = dc.main.get(name);
    table.remove({}, {}, function (err, data) {
        cb(err, backBodyNode);
    });
}

/**
 *
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD16 = function (user, headNode, bodyNode, cb) {
    var backBodyNode = {};
    var name = bodyNode.cond.name;
    var trueName = name.split('.')[1];
    var conn = dc.mg_msg.getConn();
    conn.dropCollection(trueName, function (err, data) {
        cb(err, backBodyNode);
    });
}

/**
 * 修改出票转发规则
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD17 = function (user, headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var table = dc.mg.get("relation");
    log.info(bodyNode);
    table.update(bodyNode.cond, bodyNode.data, [], function (err, data) {
        if (err) {
            log.info(err);
            cb(ec.E0999);
        }
        else {
            cb(err, backBodyNode);
        }
    });
};

/**
 * 更新消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD18 = function (user, headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var table = dc.mg_msg.get("msg");
    log.info(bodyNode);
    table.update(bodyNode.cond, bodyNode.data, [], function (err, data) {
        if (err) {
            log.info(err);
            cb(ec.E0999);
        }
        else {
            cb(err, backBodyNode);
        }
    });
};


/**
 * 修改密码
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD19 = function (user, headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var customerTable = dc.main.get("customer");

    customerTable.update({id: headNode.userId}, {$set: {password: bodyNode.newPassword}}, [], function (err, data) {
        if (err) {
            log.info(err);
            cb(ec.E0999);
        }
        else {
            cb(err, backBodyNode);
        }
    });
};


/**
 * 修改游戏状态
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD20 = function (user, headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var table = dc.mg.get("gamePermission");
    var permission = bodyNode.cond.gamePermission;
    if (permission == gameStatus.USABLE) {
        permission = gameStatus.NO_USABLE;
    } else {
        permission = gameStatus.USABLE;
    }
    table.update(bodyNode.cond, {$set: {gamePermission: permission}}, [], function (err, data) {
        if (err) {
            cb(ec.E0999);
        }
        else {
            //增加通知
            var game={};
            game._id = bodyNode.cond._id;
            game.gamePermission = permission;
            notifySer.saveGamePermission(game,function(err,data){
                if(err){
                    cb(ec.E0999);
                }else{
                    cb(err, backBodyNode);
                }
            });
        }
    });
};


var adminControl = new AdminControl();
module.exports = adminControl;