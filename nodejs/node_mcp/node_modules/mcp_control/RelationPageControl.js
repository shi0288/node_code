var esut = require('easy_util');
var dc = require('mcp_db').dc;
var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;
var game = config.game;
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;
var async = require('async');
var service = require("mcp_service");
var digestSer = service.digestSer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var ticketStatus = cons.ticketStatus;
var ticketPrintStatus = cons.ticketPrintStatus;
var userType = cons.userType;
var errUrl = cons.errUrl;

var RelationPageControl = function(){};

RelationPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    var self = this;
    var cmd = headNode.cmd;
    async.waterfall([
        //校验是否结束会话
        function (cb) {

            var userId = headNode.userId;
            if(userId == undefined)
            {
                if(headNode.userType!=undefined){
                    var userTypeId = userType[headNode.userType];
                    ec.E9006.url=errUrl.getInfoById(userTypeId).url;
                }
                cb(ec.E9006);
            }else{
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var fromType = prop.digestFromType.CACHE;
            digestSer.getKey({fromType:fromType, userId:headNode.userId, userType:userTypeId},
                function(err, key){
                    cb(err, key);
                });
        },
        //校验密钥并处理逻辑
        function(key, cb)
        {
            if(key != headNode.key)
            {
                cb(ec.E9003);
            }
            else
            {
                self[cmd[1]](headNode, bodyNode, cb);
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
};

RelationPageControl.prototype.list = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    pageUtil.parse(bodyNode, backBodyNode);
    backBodyNode.game = game.getInfo();
    var table = dc.mg.get("relation");
    var cursor = table.find({customerId:bodyNode.customerId}, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.game = game.getInfo(set.gameCode);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            backBodyNode.cond.customerId=bodyNode.customerId;
            cb(null, backBodyNode);
        });
    });
};

RelationPageControl.prototype.add = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    backBodyNode.customerId=bodyNode.customerId;
    backBodyNode.game = game.getInfo();
    cb(null, backBodyNode);
};

RelationPageControl.prototype.detail = function(headNode, bodyNode, cb)
{
    var self = this;
    log.info(bodyNode);
    var backBodyNode = {title:"view terms"};
    backBodyNode.game = game.getInfo();
    var table = dc.mg.get("relation");
    var cond = {_id:bodyNode.id};
    table.findOne(cond, {}, {}, function(err, data){
        backBodyNode.relation = data;
        cb(err, backBodyNode);
    });
};

module.exports = new RelationPageControl();