var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;
var prop = require('mcp_config').prop;

var esut = require("easy_util");
var dateUtil = esut.dateUtil;
var log = esut.log;
var digestUtil = esut.digestUtil;

var fs = require("fs");
var path = require("path");

var mcpUtil = require("mcp_util");
var fsUtil = mcpUtil.fsUtil;
var strBuffer = mcpUtil.strBuffer;

var service = require("mcp_service");
var termSer = service.termSer;
var msgSer = service.msgSer;
var ticketSer = service.ticketSer;
var notifySer = service.notifySer;
var termReportSer = service.termReportSer;

var cons = require('mcp_constants');
var ticketStatus = cons.ticketStatus;
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var termReportType = cons.termReportType;

var CheckFileJob = function(dTerm){
    var self = this;
    self.dTerm = dTerm;

    self.hitColName = dTerm.gameCode + "_" + dTerm.code + "_hit";

    var currDate = dateUtil.toCurrentDate();
    var dir = "/data/app/issue";
    self.dir = path.join(dir, dTerm.gameCode, currDate, dTerm.code);
    self.file = path.join(self.dir, dTerm.gameCode + "_" + dTerm.code + "_0.txt");

    self.tmpHitTable = dTerm.gameCode + dTerm.code;
    self.logStart = "gameCode:" + dTerm.gameCode + ",termCode:" + dTerm.code + ",算奖文件生成,";
};

/**
 * 删除临时表
 * @private
 */
CheckFileJob.prototype._deleteTempTable = function(cb)
{
    var self = this;
    log.info(self.logStart + "删除临时表:" + self.tmpHitTable);
    var sql = "drop table " + self.tmpHitTable;
    var conn = dc.main.getConn();
    conn.execute(sql, {}, function (err, data) {
        cb(null, null);
    });
}

/**
 * 创建临时表
 * @private
 */
CheckFileJob.prototype._createTempTable = function(cb)
{
    var self = this;
    log.info(self.logStart + "创建临时表:" + self.tmpHitTable);
    var sql = "create table if not exists " + self.tmpHitTable + " as select * from hitticket";
    var conn = dc.main.getConn();
    conn.execute(sql, {}, function (err, data) {
        if(err)
        {
            log.error(err);
            cb(ec.E0999, null);
        }
        else
        {
            cb(null, null);
        }
    });
}

CheckFileJob.prototype._writeFile = function(cb)
{
    var self = this;
    var writeData = fs.createWriteStream(self.file, {
        flags:'a+',
        encoding:'utf8'
    });
    var hitTable = dc.mg.getConn().collection(self.hitColName);
    var curCount = 0;
    var hasNext = true;
    var split = "@";
    var conn = dc.main.getConn();
    async.whilst(
        function () { return hasNext;},
        function (callback) {
            hitTable.findAndRemove({}, {}, [], function(err, ticket){
                if(err)
                {
                    callback(err);
                    return;
                }
                if(ticket)
                {
                    curCount++;
                    var bonusDetailStr = JSON.stringify(ticket.bonusDetail);

                    //将中奖的写入文件 后续使用buffer实现
                    var strB = new strBuffer();
                    strB.append(ticket._id).append(split).append(ticket.outerId).append(split).append(ticket.bonus);
                    strB.append(split).append(bonusDetailStr).append(split).append(ticket.bonusBeforeTax).append(split);
                    strB.append(ticket.auditTermCode).append(split).append(ticket.dNumber).append(split).append(ticketStatus.HIT);
                    strB.append("\r\n");
                    writeData.write(strB.toString());

                    var sql = 'insert into ' + self.tmpHitTable + '(id,outerId,bonus,bonusDetail,bonusBeforeTax,auditTermCode,dNumber,status) values(';
                    sql += ticket._id + ",'" + ticket.outerId + "'," + ticket.bonus + ",'" + bonusDetailStr + "',";
                    sql += ticket.bonusBeforeTax + ",'" + ticket.auditTermCode + "','" + ticket.dNumber + "'," + ticketStatus.HIT + ")";
                    //log.info(sql);
                    conn.execute(sql, [], function(err ,data){
                        if(err)
                        {
                            log.error(err);
                        }
                        callback(err);
                    });
                }
                else
                {
                    callback();
                    hasNext = false;
                }
            });
        },
        function (err) {
            writeData.end();    //关闭流
            cb(err, curCount);
        }
    );
}

CheckFileJob.prototype.run = function(cb)
{
    var self = this;
    async.waterfall([
        function(cb)
        {
            if(fsUtil.createDirSync(self.dir))
            {
                cb(null);
            }
            else
            {
                log.error(self.logStart + "创建目录 + " + + " + 失败!");
                cb(ec.E0999);
            }
        },
        function(cb)
        {
            /*
            self._deleteTempTable(function(err, data){
                if(err)
                {
                    log.error(err);
                    log.error(self.logStart + data);
                }
                cb(err);
            });
            */
            cb(null);
        },
        function(cb)
        {
            self._createTempTable(function(err, data){
                if(err)
                {
                    log.error(err);
                    log.error(self.logStart + data);
                }
                cb(err);
            });
        },
        function(cb)
        {
            self._writeFile(function(err, data){
                if(err)
                {
                    log.error(err);
                    log.error(self.logStart + data);
                }
                cb(err);
            });
        },
        function(cb)
        {
            log.info(self.logStart + "删除完成的临时记录表:" + self.hitColName);
            var conn = dc.mg.getConn();
            conn.dropCollection(self.hitColName, function(err, data){
                if(err)
                {
                    log.error(self.logStart + err);
                }
                cb(null, null); //这儿故意忽略错误
            });
        }
    ], function (err, result) {
        cb(err, result);
    });
}

module.exports = CheckFileJob;