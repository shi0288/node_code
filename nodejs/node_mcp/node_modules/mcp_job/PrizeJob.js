var async = require('async');

var esut = require("easy_util");
var log = esut.log;

var dc = require('mcp_db').dc;

var service = require("mcp_service");
var termSer = service.termSer;
var msgSer = service.msgSer;
var ticketSer = service.ticketSer;
var notifySer = service.notifySer;
var termReportSer = service.termReportSer;

var cons = require('mcp_constants');
var userType = cons.userType;
var termReportType = cons.termReportType;

/**
 * @param dTerm 期次的详细信息
 * @constructor
 */
var PrizeJob = function(dTerm){
    var self = this;
    self.dTerm = dTerm;
    self.tempTableName = dTerm.gameCode + dTerm.code;   //临时表名称
    self.logStart = "gameCode:" + dTerm.gameCode + ",termCode:" + dTerm.code + ",返奖,";

    self.keyList = {
        'saleCount':0,'saleAmount':0,
        'hitCount':0, 'hitAmount':0,
        'bonus':0, 'bonusBeforeTax':0,
        'notHitCount':0, 'notHitAmount':0,
        'failCount':0, 'failAmount':0
    };
};

/**
 * 打印信息
 * @param msg
 */
PrizeJob.prototype._info = function(msg)
{
    var self = this;
    log.info(self.logStart + msg);
}

/**
 * 更新中奖信息
 */
PrizeJob.prototype._updateHit = function(cb)
{
    var self = this;
    var now = new Date().getTime();
    var sql = "UPDATE tticket a INNER JOIN " + self.tempTableName + " b on a.id = b.id SET ";
    sql += "a.bonus = b.bonus, a.bonusDetail = b.bonusDetail, a.bonusBeforeTax = b.bonusBeforeTax, ";
    sql += "a.auditTermCode = b.auditTermCode, a.dNumber = b.dNumber, a.status = b.status, a.prizeTime = " + now;
    self._info(sql);
    var conn = dc.main.getConn();
    conn.execute(sql, {}, function (err, data) {
        if(err)
        {
            cb(err, "返奖(更新票据数据)失败................");
        }
        else
        {
            self._info("返奖(更新票据数据)成功................");
            self._info("执行sql时间" + (new Date().getTime() - now) + "ms.");
            cb(null, data);
        }
    });
}

/**
 * 删除临时表
 * @private
 */
PrizeJob.prototype._deleteTempTable = function(cb)
{
    var self = this;
    var sql = "drop table " + self.tempTableName;
    var conn = dc.main.getConn();
    self._info(sql);
    conn.execute(sql, {}, function (err, data) {
        if(err)
        {
            cb(err, "删除临时表失败................");
        }
        else
        {
            self._info("删除临时表成功................");
            cb(null, null);
        }
    });
}

/**
 * 更新未中奖的数据
 * @param cb
 * @private
 */
PrizeJob.prototype._updateNotHit = function(cb)
{
    var self = this;
    ticketSer.newNotHit(self.dTerm, function(err, data){
        if(err)
        {
            cb(err, "更新未中奖票据失败.");
        }
        else
        {
            self._info("更新未中奖票据成功.")
            cb(null, null);
        }
    });
}

/**
 * 处理期次报表
 * @param rpt
 * @param cb
 * @private
 */
PrizeJob.prototype._handleReport = function(rpt, cb)
{
    var self = this;
    rpt.saleCount = rpt.hitCount + rpt.notHitCount;
    rpt.saleAmount = rpt.hitAmount + rpt.notHitAmount;
    async.waterfall([
        //保存报表信息
        function(cb)
        {
            var table = dc.main.get("termreport");
            table.save(rpt, {}, function(err, data){
                if(err)
                {
                    cb(err, "保存报表信息出错.");
                }
                else
                {
                    cb(null);
                }
            });
        },
        //处理期次各种财务
        function(cb)
        {
            termReportSer.handleMoney(rpt, function(err, data){
                if(err)
                {
                    cb(err, "处理期次各种财务操作出错.");
                }
                else
                {
                    cb(null);
                }
            });
        }
    ], function (err, result) {
        if(err)
        {
            log.error(self.logStart + result);
        }
        cb(err, result);
    });
}

/**
 * 生成期次报表
 * @param cb
 * @private
 */
PrizeJob.prototype._generateReport = function(cb)
{
    var self = this;
    var now = new Date().getTime();
    var cond = "gameCode='" + self.dTerm.gameCode + "' and auditTermCode='" + self.dTerm.code + "'";
    async.waterfall([
        //查找所有的渠道
        function(cb)
        {
            var cond = {
                type:userType.CHANNEL
            }
            var table = dc.main.get("customer");
            var cursor = table.find(cond, {id:1, status:1});
            cursor.toArray(function(err, customers){
                if(err)
                {
                    cb(err, "获取渠道用户信息失败.");
                }
                else
                {
                    self._info("获取渠道用户信息成功.");
                    cb(null, customers);
                }
            });
        },
        //初始化必要字段
        function(customers, cb)
        {
            var indexes = {}; //索引
            var reportTypes = termReportType.getInfoById();
            for(var ckey in customers)
            {
                var customer = customers[ckey];
                indexes[customer.id] = ckey;  //保存索引信息
                for(var rkey in reportTypes)
                {
                    var reportType = reportTypes[rkey];
                    var set = {};
                    for(var key in self.keyList)
                    {
                        set[key] = 0;
                    }
                    set.gameCode = self.dTerm.gameCode;
                    set.termCode = self.dTerm.code;
                    set.customerId = customer.id;
                    set.type = reportType.id;
                    set.createTime = now;

                    var reportTypeKey = "report_" + reportType.id;   //为了区分销售和出票
                    customer[reportTypeKey] = set;
                }
            }
            cb(null, customers, indexes);
        },
        //销售角度统计中奖数目
        function(customers, indexes, cb)
        {
            var conn = dc.main.getConn();
            var reportTypeKey = "report_" + termReportType.SALE;
            var sql = "select customerId,count(*) as hitCount,sum(amount) as hitAmount,sum(bonus) as bonus,sum(bonusBeforeTax) as bonusBeforeTax from tticket where status=1200 and " + cond + " group by customerId";
            conn.execute(sql, [], function(err, data){
                if(err)
                {
                    cb(err, "销售角度统计中奖数目失败.");
                }
                else
                {
                    self._info("销售角度统计中奖数目成功.");
                    for(var key in data)
                    {
                        var set = data[key];
                        var report = customers[indexes[set.customerId]][reportTypeKey];
                        report.hitCount = set.hitCount;
                        report.hitAmount = set.hitAmount;
                        report.bonus = set.bonus;
                        report.bonusBeforeTax = set.bonusBeforeTax;
                    }
                    cb(null, customers, indexes);
                }
            });
        },
        //销售角度统计未中奖数目
        function(customers, indexes, cb)
        {
            var conn = dc.main.getConn();
            var reportTypeKey = "report_" + termReportType.SALE;
            var sql = "select customerId,count(*) as notHitCount,sum(amount) as notHitAmount from tticket where status=1300 and " + cond + " group by customerId";
            conn.execute(sql, [], function(err, data){
                if(err)
                {
                    cb(err, "销售角度统计未中奖数目失败.");
                }
                else
                {
                    self._info("销售角度统计未中奖数目成功.");
                    for(var key in data)
                    {
                        var set = data[key];
                        var report = customers[indexes[set.customerId]][reportTypeKey];
                        report.notHitCount = set.notHitCount;
                        report.notHitAmount = set.notHitAmount;
                    }
                    cb(null, customers, indexes);
                }
            });
        },
        //销售角度统计失败数目
        function(customers, indexes, cb)
        {
            var conn = dc.main.getConn();
            var reportTypeKey = "report_" + termReportType.SALE;
            var sql = "select customerId,count(*) as failCount,sum(amount) as failAmount from tticket where status=1400 and " + cond + " group by customerId";
            conn.execute(sql, [], function(err, data){
                if(err)
                {
                    cb(err, "销售角度统计失败数目失败.");
                }
                else
                {
                    self._info("销售角度统计失败数目成功.");
                    for(var key in data)
                    {
                        var set = data[key];
                        var report = customers[indexes[set.customerId]][reportTypeKey];
                        report.failCount = set.failCount;
                        report.failAmount = set.failAmount;
                    }
                    cb(null, customers, indexes);
                }
            });
        },
        //出票角度统计中奖数目
        function(customers, indexes, cb)
        {
            var conn = dc.main.getConn();
            var reportTypeKey = "report_" + termReportType.PRINT;
            var sql = "select printId as customerId,count(*) as hitCount,sum(amount) as hitAmount,sum(bonus) as bonus,sum(bonusBeforeTax) as bonusBeforeTax from tticket where status=1200 and " + cond + " group by printId";
            conn.execute(sql, [], function(err, data){
                if(err)
                {
                    cb(err, "出票角度统计中奖数目失败.");
                }
                else
                {
                    self._info("出票角度统计中奖数目成功.");
                    for(var key in data)
                    {
                        var set = data[key];
                        var report = customers[indexes[set.customerId]][reportTypeKey];
                        report.hitCount = set.hitCount;
                        report.hitAmount = set.hitAmount;
                        report.bonus = set.bonus;
                        report.bonusBeforeTax = set.bonusBeforeTax;
                    }
                    cb(null, customers, indexes);
                }
            });
        },
        //出票角度统计未中奖数目
        function(customers, indexes, cb)
        {
            var conn = dc.main.getConn();
            var reportTypeKey = "report_" + termReportType.PRINT;
            var sql = "select printId as customerId,count(*) as notHitCount,sum(amount) as notHitAmount from tticket where status=1300 and " + cond + " group by printId";
            conn.execute(sql, [], function(err, data){
                if(err)
                {
                    cb(err, "出票角度统计未中奖数目失败.");
                }
                else
                {
                    self._info("出票角度统计未中奖数目成功.");
                    for(var key in data)
                    {
                        var set = data[key];
                        var report = customers[indexes[set.customerId]][reportTypeKey];
                        report.notHitCount = set.notHitCount;
                        report.notHitAmount = set.notHitAmount;
                    }
                    cb(null, customers, indexes);
                }
            });
        },
        //出票角度统计失败数目
        function(customers, indexes, cb)
        {
            var conn = dc.main.getConn();
            var reportTypeKey = "report_" + termReportType.PRINT;
            var sql = "select printId as customerId,count(*) as failCount,sum(amount) as failAmount from tticket where status=1400 and " + cond + " group by printId";
            conn.execute(sql, [], function(err, data){
                if(err)
                {
                    cb(err, "出票角度统计失败数目失败.");
                }
                else
                {
                    self._info("出票角度统计失败数目成功.");
                    for(var key in data)
                    {
                        var set = data[key];
                        var report = customers[indexes[set.customerId]][reportTypeKey];
                        report.failCount = set.failCount;
                        report.failAmount = set.failAmount;
                    }
                    cb(null, customers, indexes);
                }
            });
        },
        //收集报表
        function(customers, indexes, cb)
        {
            var rpts = [];
            var reportTypeSaleKey = "report_" + termReportType.SALE;
            var reportTypePrintKey = "report_" + termReportType.PRINT;
            for(var ckey in customers)
            {
                var customer = customers[ckey];
                rpts.push(customer[reportTypeSaleKey]);
                rpts.push(customer[reportTypePrintKey]);
            }
            cb(null, rpts);
        },
        //处理报表(保存到数据库及返奖、退款、支付奖金、出票收入)
        function(rpts, cb)
        {
            async.eachSeries(rpts, function(rpt, callback) {
                self._handleReport(rpt, function(err, data){
                    if(err)
                    {
                        log.error(data);
                    }
                    callback(err);
                });
            }, function(err){
                if(err)
                {
                    cb(err, "处理报表财务信息失败");
                }
                else
                {
                    cb(null, "success");
                }
            });
        }
    ], function (err, result) {
        if(err)
        {
            log.error(self.logStart + result);
        }
        cb(err, result);
    });
}

/**
 *
 * @param cb
 */
PrizeJob.prototype.run = function(cb)
{
    var self = this;
    async.waterfall([
        function(cb)
        {
            self._updateHit(function(err, data){
                if(err)
                {
                    log.error(err);
                    log.error(self.logStart + data);
                }
                cb(err);
            });
        },
        function(cb)
        {
            self._deleteTempTable(function(err, data){
                if(err)
                {
                    log.error(err);
                    log.error(self.logStart + data);
                }
                cb(err);
            });
        },
        function(cb)
        {
            self._updateNotHit(function(err, data){
                if(err)
                {
                    log.error(err);
                    log.error(self.logStart + data);
                }
                cb(err);
            });
        },
        function(cb)
        {
            self._generateReport(function(err, data){
                if(err)
                {
                    log.error(err);
                    log.error(self.logStart + data);
                }
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err, result);
    });
}

module.exports = PrizeJob;
