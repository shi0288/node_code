var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;
var prop = require('mcp_config').prop;

var esut = require("easy_util");
var dateUtil = esut.dateUtil;
var log = esut.log;
var digestUtil = esut.digestUtil;

var fs = require("fs");
var path = require("path");

var mcpUtil = require("mcp_util");
var fsUtil = mcpUtil.fsUtil;
var strBuffer = mcpUtil.strBuffer;

var service = require("mcp_service");
var termSer = service.termSer;
var msgSer = service.msgSer;
var ticketSer = service.ticketSer;
var notifySer = service.notifySer;
var termReportSer = service.termReportSer;

var cons = require('mcp_constants');
var ticketStatus = cons.ticketStatus;
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var termReportType = cons.termReportType;
var gameGrade = cons.gameGrade;

var cp = require('mcp_cp');
var checkFac = cp.checkFac;

var IssueModel = function(){};

/**
 * 查找需要处理的期次
 * @param cb
 */
IssueModel.prototype.findToHandle = function(cb)
{
    var self = this;
    async.waterfall([
        //是否需要有开售的期次
        function(cb)
        {
            termSer.findToOpen(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要停售的期次
        function(cb)
        {
            termSer.findToClose(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要后台停售的期次
        function(cb)
        {
            termSer.findToBackClose(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要算奖的期次
        function(cb)
        {
            termSer.findToCheck(function(err, term){
                if(term)
                {


                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要返奖的期次
        function(cb)
        {
            termSer.findToPrize(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要封存的期次
        function(cb)
        {
            termSer.findToSEAL(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        }
    ], function (err, result) {
        cb(err, result);
    });
}

/**
 * 后台停售
 * @param msg
 * @param dTerm
 * @param cb
 */
IssueModel.prototype.backClose = function(msg, dTerm, cb)
{
    var self = this;
    var table = dc.mg.get("printqueen");
    var cond = {gameCode:dTerm.gameCode, termCode:dTerm.code};
    var hasNext = true;
    async.whilst(
        function () { return hasNext;},
        function (callback) {
            table.findAndRemove(cond, {}, {}, function(err, ticket){
                if(ticket)
                {
                    ticket.id = ticket._id;
                    ticketSer.printFail(ticket, dTerm.code, function(err, backTicket){
                        if(err)
                        {
                            log.info(err);
                            callback();
                            return;
                        }
                        backTicket.id = backTicket._id;
                        backTicket.createTime = dateUtil.toString(backTicket.createTime);
                        delete backTicket._id;
                        delete backTicket.takeTime;
                        delete backTicket.version;
                        delete backTicket.printQueenStatus;
                        notifySer.saveTicket(backTicket, function(err, data){
                            callback(err);
                        });
                    });
                }
                else
                {
                    hasNext = false;
                    callback();
                }
            });
        },
        function (err) {
            cb(err, null);
        }
    );
}

/**
 * 算奖
 * @param cb
 */
IssueModel.prototype.check = function(msg, dTerm, cb)
{
    log.info("算奖开始时间"+new Date().getTime());
    var self = this;
    var colName = dTerm.gameCode + "_" + dTerm.code + "_" + msg.sep;
    var conn = dc.mg.getConn();
    var table = conn.collection(colName);

    async.waterfall([
        //校验奖级是否完整
        function(cb)
        {
            var cond = {gameCode:dTerm.gameCode, termCode:dTerm.code};
            var sort = {level:1};
            var gradeTable = dc.main.get("gamegrade");
            gradeTable.find(cond, {level:1, bonus:1}).sort(sort).toArray(function(err, data){
                log.info(err);
                log.info(data);
                if(err)
                {
                    cb(err);
                    return;
                }
                var game = gameGrade.getInfoById(dTerm.gameCode);
                if(game && game.grades)
                {
                    if(game.grades.length == data.length)
                    {
                        cb(null, data);
                    }
                    else
                    {
                        log.error("奖级不完整!");
                        cb("奖级不完整!");
                    }
                }
                else
                {
                    log.error("游戏不存在!");
                    cb("游戏不存在");
                }
            });
        },
        //获得算奖类
        function(grades, cb)
        {
            var check = checkFac.getCheck(dTerm.gameCode, grades, dTerm.wNum);
            cb(null, check);
        },
        //查看一共有多少条记录
        function(check, cb)
        {
            var cursor = table.find({}, {}, {});
            cursor.count(function(err, count){
                cursor.close();
                cb(err, check, count);
            });
        },
        //遍历每一条记录
        //update 处理模式 1.先处理通知消息 2.  3.放入数组写入文件,4.最后更新未中奖在所有队列处理完成,也就是反奖的时候处理
        function(check, count, cb)
        {
            log.info(colName + ",开始遍历记录.......");
            var curCount = 0;
            var hasNext = true;
            //保存到中奖缓存队列
            var hitColName = dTerm.gameCode + "_" + dTerm.code + "_hit";
            var hitTable = dc.mg.getConn().collection(hitColName);
            async.whilst(
                function () { return hasNext;},
                function (callback) {
                    table.findAndRemove({}, {}, [], function(err, ticket){
                        if(err)
                        {
                            callback(err);
                            return;
                        }
                        if(ticket)
                        {
                            curCount++;
                            var name = 'count' + ticket.pType + ticket.bType;
                            var bonusInfo = check[name]({number:ticket.number});
                            ticket.dNumber = dTerm.wNum;
                            ticket.auditTermCode = dTerm.code;
                            //保存中獎或者未中獎通知
                            self.sendMsg(ticket, bonusInfo, function(err, data){
                                if(err)
                                {
                                    callback(err);
                                    return;
                                }
                                if(ticket.bonus > 0){
                                    var hitTicket = {
                                        _id:ticket.id,
                                        outerId:ticket.outerId,
                                        bonus:ticket.bonus,
                                        bonusDetail:ticket.bonusDetail,
                                        bonusBeforeTax:ticket.bonusBeforeTax,
                                        auditTermCode:ticket.auditTermCode,
                                        dNumber:ticket.dNumber,
                                        status:ticketStatus.HIT
                                    };
                                    hitTable.save(hitTicket, [], function(err, data){
                                        callback(null);
                                    });
                                }else{
                                    callback();
                                }
                            })
                        }
                        else
                        {
                            hasNext = false;
                            callback();
                        }
                    });
                },
                function (err) {
                    cb(err, count, curCount);
                }
            );
        }
    ], function (err, total, count) {
        log.info(colName + ",算奖结束,总记录数:" + total + ",完成数:" + count + ".");
        if(err)
        {
            cb(err, {total:total, finished:count});
        }
        else
        {
            if(total > 0)
            {
                conn.dropCollection(colName, function(err, data){
                    log.info("删除完成的临时记录表:" + colName);
                    log.info(err);
                    cb(err, {total:total, finished:count});
                });
            }
            else
            {
                cb(err, {total:total, finished:count});
            }
        }
    });
}

/**
 * 对单张票进行算奖
 * @param msg
 * @param dTerm
 * @param cb
 */
IssueModel.prototype.checkTicket = function(ticket)
{
    var self = this;
}

IssueModel.prototype.sendMsg = function(ticket, bonusInfo, cb)
{
    var self = this;
    ticket.id = ticket._id;
    ticket.bonus = bonusInfo.bonus*ticket.multiple;
    ticket.bonusBeforeTax = bonusInfo.bonusBeforeTax*ticket.multiple;
    ticket.bonusDetail = bonusInfo.bonusDetail;
    if(ticket.bonus > 0)
    {
        ticket.status = ticketStatus.HIT;
    }
    else
    {
        ticket.status = ticketStatus.NOT_HIT;
    }
    delete ticket._id;
    delete ticket.version;
    delete ticket.takeTime;
    delete ticket.printId;
    notifySer.saveTicket(ticket, function(err, data){
        cb(err, data);
    });
}

module.exports = new IssueModel();