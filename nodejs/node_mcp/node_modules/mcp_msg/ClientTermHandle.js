var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;
var prop = require('mcp_config').prop;
var esut = require("easy_util");
var dateUtil = esut.dateUtil;

var log = esut.log;
var digestUtil = esut.digestUtil;
var termSer = require("mcp_service").termSer;

var path = require("path");
var mcpUtil = require("mcp_util");
var fsUtil = mcpUtil.fsUtil;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;

var issue = require("mcp_issue");
var issueModel = issue.issueModel;

var job = require("mcp_job");

var ClientTermHandle = function(){};

ClientTermHandle.prototype.handle = function(msg, dTerm, cb)
{
    var self = this;
    async.waterfall([
        //处理消息
        function(cb)
        {
            if(dTerm.status == termStatus.PRE_ON_SALE)
            {
                self.open(msg, dTerm, function(err, data){
                    cb(err);
                });
            }
            else if(dTerm.status == termStatus.PREEND)
            {
                self.close(msg, dTerm, function(err, data){
                    cb(err);
                });
            }
            else if(dTerm.status == termStatus.PRE_SEND)
            {
                self.backClose(msg, dTerm, function(err, data){
                    cb(err);
                });
            }
            else if(dTerm.status == termStatus.IN_CALCULATE)
            {
                self.check(msg, dTerm, function(err, data){
                    cb(err);
                });
            }
            else if(dTerm.status == termStatus.IN_PAYOUT)
            {
                self.prize(msg, dTerm, function(err, data){
                    cb(err);
                });
            }
            else
            {
                cb(null);
            }
        }
    ], function (err, result) {
        var cond = {_id:msg._id};
        var data = {$set:{
        }};
        var table = dc.mg_msg.get("msg");
        if(err)
        {
            data.$set.status = msgStatus.FAILED;
        }
        else
        {
            data.$set.status = msgStatus.HANDLED;
        }
        table.update(cond, data, [], function(err, data){
            cb(err, result);
        });
    });
}

/**
 * 期次开售
 * @param msg
 * @param detail_term
 * @param cb
 */
ClientTermHandle.prototype.open = function(msg, dTerm, cb)
{
    log.info(dTerm);
    cb(null);
}

/**
 * 期次停售
 * @param msg
 * @param detail_term
 * @param cb
 */
ClientTermHandle.prototype.close = function(msg, dTerm, cb)
{
    log.info(dTerm);
    cb(null);
}


/**
 * 期次后台停售
 * @param msg
 * @param detail_term
 * @param cb
 */
ClientTermHandle.prototype.backClose = function(msg, dTerm, cb)
{
    issueModel.backClose(msg, dTerm, cb);
}

/**
 * 算奖
 * @param msg
 * @param detail_term
 * @param cb
 */
ClientTermHandle.prototype.check = function(msg, dTerm, cb)
{

    issueModel.check(msg, dTerm, cb);
}


/**
 * 返奖
 * @param msg
 * @param detail_term
 * @param cb
 */
ClientTermHandle.prototype.prize = function(msg, dTerm, cb)
{
    //issueModel.prize(msg, dTerm, cb);
    var prizeJob = new job.PrizeJob(dTerm);
    prizeJob.run(function(err, data){
        cb(err, data);
    });
}

module.exports = new ClientTermHandle();