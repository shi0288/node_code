var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;

var config = require('mcp_config');
var prop = config.prop;
var game = config.game;

var esut = require("easy_util");
var log = esut.log;
var digestUtil = esut.digestUtil;

var service = require("mcp_service");
var termSer = service.termSer;
var msgSer = service.msgSer;
var notifySer = service.notifySer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var gameType = cons.gameType;

var MasterTermFileHandle = function(){};

MasterTermFileHandle.prototype.handle = function(msg, dTerm, cb)
{
    var self = this;
    async.waterfall([
        //处理消息
        function(cb)
        {
            if(dTerm.status == termStatus.IN_CALCULATE)
            {
                self.check(msg, dTerm, cb);
            }
            else
            {
                cb(null, null);
            }
        },
        //标记消息已经处理完成
        function(data, cb)
        {
            msgSer.updateStatus(msg._id, msgStatus.FINISHED, cb);
        }
    ], function (err, result) {
        cb(err, result);
    });
}


/**
 * 期次算奖结束，生成新的消息，用来生成文件
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermFileHandle.prototype.check = function(msg, dTerm, cb)
{
    var self = this;
    var cond = {id:dTerm.termId, status:termStatus.CALCULATE};
    async.waterfall([
        //更新期次状态
        function(cb)
        {
            termSer.updateStatusById(cond, cb);
        }
    ], function (err, result) {
        cb(err, result);
    });
}

module.exports = new MasterTermFileHandle();