var async = require('async');
var dc = require('mcp_db').dc;
var esut = require("easy_util");

var cons = require('mcp_constants');
var msgType = cons.msgType;
var msgStatus = cons.msgStatus;
var termStatus = cons.termStatus;

var log = esut.log;
var digestUtil = esut.digestUtil;

var config = require("mcp_config");
var prop = config.prop;

var MsgService = function(){};

MsgService.prototype.saveTerm = function(term, cb)
{
    var self = this;
    log.info(term);
    if(term.status == termStatus.IN_CALCULATE)
    {
        self.saveCheckTerm(term, cb);
        return;
    }
    async.waterfall([
        function(cb)
        {
            var msgId = digestUtil.createUUID();
            var detail_term = {gameCode:term.gameCode, code:term.code,
                nextCode:term.nextCode,wNum:term.wNum,status:term.status,
                msgId:msgId, termId:term.id};
            detail_term.total = 0;
            detail_term.finished = 0;
            detail_term.flag = 0;
            detail_term._id = detail_term.gameCode + "_" + detail_term.code +
                "_" + detail_term.status;
            var detail_term_table = dc.mg_msg.get("detail_term");
            detail_term_table.save(detail_term, [], function(err, data){
                cb(err, msgId);
            });
        },
        //保存消息
        function(msgId, cb)
        {
            var msg = {_id:msgId,
                parentId:'', type:msgType.TERM, subCount:0, finishCount:0,
                status:msgStatus.INIT, version:0, createTime:new Date().getTime()};
            var table = dc.mg_msg.get("msg");
            table.save(msg, [], function(err, data){
                cb(err, msg);
            });
        }
    ], function (err, result) {
        cb(err, result);
    });
}


MsgService.prototype.saveTermFileMsg = function(term, cb)
{
    var self = this;
    async.waterfall([
        function(cb)
        {
            var msgId = digestUtil.createUUID();
            var detail_term = {gameCode:term.gameCode, code:term.code,
                nextCode:term.nextCode,wNum:term.wNum,status:term.status,
                msgId:msgId, termId:term.termId};
            detail_term.total = 0;
            detail_term.finished = 0;
            detail_term.flag = 0;
            detail_term._id = detail_term.gameCode + "_" + detail_term.code +
                "_" + detail_term.status + "_file";
            var detail_term_table = dc.mg_msg.get("detail_term");
            detail_term_table.save(detail_term, [], function(err, data){
                cb(err, msgId);
            });
        },
        //保存消息
        function(msgId, cb)
        {
            var msg = {_id:msgId,
                parentId:'', type:msgType.TERM_HIT_FILE, subCount:0, finishCount:0,
                status:msgStatus.INIT, version:0, createTime:new Date().getTime()};
            var table = dc.mg_msg.get("msg");
            table.save(msg, [], function(err, data){
                cb(err, msg);
            });
        }
    ], function (err, result) {
        cb(err, result);
    });
}

/**
 * 保存算奖的父消息，和其它状态的区别是，父消息的初始状态
 * 是等待子消息的完成
 * @param term
 * @param cb
 */
MsgService.prototype.saveCheckTerm = function(term, cb)
{
    var self = this;
    async.waterfall([
        function(cb)
        {
            var msgId = digestUtil.createUUID();
            var detail_term = {gameCode:term.gameCode, code:term.code,
                nextCode:term.nextCode, status:term.status,
                msgId:msgId, termId:term.id, wNum:term.wNum};
            detail_term.total = 0;
            detail_term.finished = 0;
            detail_term.flag = 0;
            detail_term._id = detail_term.gameCode + "_" + detail_term.code +
                "_" + detail_term.status;
            var detail_term_table = dc.mg_msg.get("detail_term");
            detail_term_table.save(detail_term, [], function(err, data){
                cb(err, msgId);
            });
        },
        //保存消息
        function(msgId, cb)
        {
            var msg = {_id:msgId,
                parentId:'', type:msgType.TERM, subCount:0, finishCount:0,
                status:msgStatus.WAIT_CHILD, version:0, createTime:new Date().getTime(),
                subCount:prop.drawCount};
            var table = dc.mg_msg.get("msg");
            table.save(msg, [], function(err, data){
                cb(err, msg);
            });
        }
    ], function (err, msg) {
        if(err)
        {
            cb(err, msg);
            return;
        }
        //保存子消息
        var seps = [];
        for(var i = 0; i < prop.drawCount; i++)
        {
            seps[seps.length] = {id:i};
        }
        async.each(seps, function(sep, callback) {
            self.saveCheckTermChild(term, msg._id, sep.id, callback);
        }, function(err){
            cb(err);
        });
    });
}

/**
 * 子消息需要设置父id和序号
 * @param term
 * @param parentId
 * @param sep
 * @param cb
 */
MsgService.prototype.saveCheckTermChild = function(term, parentId, sep, cb)
{
    var self = this;
    async.waterfall([
        function(cb)
        {
            var msgId = digestUtil.createUUID();
            var detail_term = {gameCode:term.gameCode, code:term.code,
                nextCode:term.nextCode, status:term.status,
                msgId:msgId, termId:term.id, wNum:term.wNum};
            detail_term.total = 0;
            detail_term.finished = 0;
            detail_term.flag = 0;
            detail_term._id = detail_term.gameCode + "_" + detail_term.code +
                "_" + detail_term.status + "_" + sep;
            var detail_term_table = dc.mg_msg.get("detail_term");
            detail_term_table.save(detail_term, [], function(err, data){
                cb(err, msgId);
            });
        },
        //保存消息
        function(msgId, cb)
        {
            var msg = {_id:msgId,
                parentId:'', type:msgType.TERM, subCount:0, finishCount:0,
                status:msgStatus.INIT, version:0, createTime:new Date().getTime(),
                parentId:parentId, sep:sep};
            var table = dc.mg_msg.get("msg");
            table.save(msg, [], function(err, data){
                cb(err, msg);
            });
        }
    ], function (err, result) {
        cb(err, result);
    });
}


MsgService.prototype.updateStatus = function(id, status, cb)
{
    var self = this;
    var table = dc.mg_msg.get("msg");
    var cond = {_id:id};
    var data = {status:status};
    if(status == msgStatus.FINISHED)
    {
        data.finishTime = new Date().getTime();
    }
    table.update(cond, {$set:data}, [], function(err, data){
        if(err)
        {
            log.info(err);
        }
        else
        {
            if(cb)
            {
                cb(err, data);
            }
        }
    });
}

/**
 * 子消息完成，通知父消息
 * @param msg
 * @param dTerm
 * @param cb
 */
MsgService.prototype.childMsgFinished = function(msg, dTerm, cb)
{
    var self = this;
    var cond = {_id:msg.parentId};
    var doc = {$inc:{finishCount:1}};
    var table = dc.mg_msg.get("msg");
    table.findAndModify(cond, {}, doc, [], function(err, data){
        cb(err, data);
    });
}

module.exports = new MsgService();
