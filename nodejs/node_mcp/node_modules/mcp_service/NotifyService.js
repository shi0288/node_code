var async = require('async');
var dc = require('mcp_db').dc;

var util = require("easy_util");
var log = util.log;
var digestUtil = util.digestUtil;
var dateUtil = util.dateUtil;

var cons = require("mcp_constants");
var userType = cons.userType;
var notifyType = cons.notifyType;
var notifyStatus = cons.notifyStatus;
var digestType = cons.digestType;

var config = require("mcp_config");
var ec = config.ec;

var kvSer = require("./KvService.js");


var NotifyService = function(){};


NotifyService.prototype.saveTicket = function(ticket, cb)
{
    var self = this;
    async.waterfall([
        //保存到通知队列
        function(cb)
        {
            kvSer.getNotifyQueenId(function(err, data){
                if(err)
                {
                    callback(ec.E0999);
                    return;
                }
                else
                {
                    cb(null, data.value);
                }
            });
        },
        //获取通知url
        function(queenId, cb)
        {
            var table = dc.mg.get("cus_config");
            var cond = {_id:ticket.customerId};
            table.findOne(cond, {}, [], function(err, config){
                if(err)
                {
                    cb(err);
                    return;
                }
                if(!config)
                {
                    config = {notifyIp:'', notifyPort:80, notifyPath:'', notifyKey:''};
                }
                cb(err, config, queenId);
            });
        },
        //保存到通知队列
        function(config, queenId, cb)
        {
            var table = dc.mg.get("notifyqueen");
            var now = new Date().getTime();
            table.save({_id:queenId, content:ticket,
                createTime:now, version:0, customerId:ticket.customerId,
                type:notifyType.TICKET, status:notifyStatus.WAIT_TAKE,
                ip:config.notifyIp, key:config.notifyKey, port:config.notifyPort,
                path:config.notifyPath, digestType:config.digestType},
            [], function(err, data){
                cb(err, null);
            });
        }
    ], function (err, rst) {
        cb(err, rst);
    });
};

/**
 * 生成期次通知
 * @param term
 * @param cb
 */
NotifyService.prototype.saveTerm = function(term, cb)
{
    var self = this;
    log.info("保存期次通知-------------------------------");
    log.info(term);
    term.openTime = dateUtil.toString(term.openTime);
    term.closeTime = dateUtil.toString(term.closeTime);
    async.waterfall([
        //查找所有的渠道
        function(cb)
        {
            var table = dc.main.get("customer");
            var cond = {type:userType.CHANNEL};
            table.find(cond, {}).toArray(function(err, data){
                if(err)
                {
                    log.error(err);
                    cb(ec.E0999);
                    return;
                }
                cb(null, data);
            });
        },
        //获得渠道的通知地址
        function(customers, cb)
        {
            async.eachSeries(customers, function(customer, callback) {
                var table = dc.mg.get("cus_config");
                var cond = {_id:customer.id};
                table.findOne(cond, {}, [], function(err, config){
                    if(err)
                    {
                        log.error(err);
                        callback();
                        return;
                    }
                    if(!config)
                    {
                        config = {notifyIp:'', notifyPort:80, notifyPath:'', notifyKey:''};
                    }
                    else
                    {
                        if(!config.digestType)
                        {
                            config.digestType = digestType.trippleDes;
                        }
                        if(!config.notifyIp)
                        {
                            config.notifyIp = '';
                        }
                        if(!config.notifyPort)
                        {
                            config.notifyPort = 80;
                        }
                        if(!config.notifyPath)
                        {
                            config.notifyPath = '';
                        }
                        if(!config.notifyKey)
                        {
                            config.notifyKey = '';
                        }
                    }
                    customer.config = config;
                    callback();
                });
            }, function(err){
                cb(err, customers);
            });
        },
        //保存期次信息到队列
        function(customers, cb)
        {
            var table = dc.mg.get("notifyqueen");
            var now = new Date().getTime();
            async.eachSeries(customers, function(customer, callback) {
                //获得id序号
                kvSer.getNotifyQueenId(function(err, data){
                    if(err)
                    {
                        log.error(err);
                        callback();
                        return;
                    }
                    var msg = {_id:data.value, content:term,
                        createTime:now, version:0, customerId:customer.id,
                        type:notifyType.TERM, status:notifyStatus.WAIT_TAKE,
                        ip:customer.config.notifyIp, port:customer.config.notifyPort,
                        path:customer.config.notifyPath, key:customer.config.notifyKey,
                        digestType:customer.config.digestType};
                    table.save(msg, [], function(err, data){
                        if(err)
                        {
                            log.error(err);
                        }
                        else
                        {
                            log.info("保存用户期次通知-------------------------------");
                            log.info(msg);
                        }
                        callback();
                    });
                });
            }, function(err){
                cb(err);
            });
        }
    ], function (err, rst) {
        cb(err, rst);
    });
};

NotifyService.prototype.saveGamePermission = function (game, cb) {
    var self = this;
    log.info("保存游戏通知-------------------------------");
    async.waterfall([
        //查找所有的渠道
        function(cb)
        {
            var table = dc.main.get("customer");
            var cond = {type:userType.CHANNEL};
            table.find(cond, {}).toArray(function(err, data){
                if(err)
                {
                    cb(ec.E0999);
                    return;
                }
                cb(null, data);
            });
        },
        //获得渠道的通知地址
        function(customers, cb)
        {
            async.each(customers, function(customer, callback) {
                var table = dc.mg.get("cus_config");
                var cond = {_id:customer.id};
                table.findOne(cond, {}, [], function(err, config){
                    if(err)
                    {
                        callback(err);
                        return;
                    }
                    if(!config)
                    {
                        config = {notifyIp:'', notifyPort:80, notifyPath:'', notifyKey:''};
                    }
                    customer.config = config;
                    callback();
                });
            }, function(err){
                cb(err, customers);
            });
        },
        //保存期次信息到队列
        function(customers, cb)
        {
            var table = dc.mg.get("notifyqueen");
            var now = new Date().getTime();
            async.each(customers, function(customer, callback) {
                //获得id序号
                kvSer.getNotifyQueenId(function(err, data){
                    if(err)
                    {
                        callback(ec.E0999);
                        return;
                    }
                    table.save({_id:data.value, content:game,
                            createTime:now, version:0, customerId:customer.id,
                            type:notifyType.GAME, status:notifyStatus.WAIT_TAKE,
                            ip:customer.config.notifyIp, port:customer.config.notifyPort,
                            path:customer.config.notifyPath, key:customer.config.notifyKey,
                            digestType:customer.config.digestType},
                        [], function(err, data){
                            callback(err);
                        });
                });
            }, function(err){
                cb(err);
            });
        }
    ], function (err , rst) {
        cb(err, rst);
    })

}

module.exports = new NotifyService();